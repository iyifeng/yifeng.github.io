<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title></title>
   
   <link></link>
   <description>没啥说的，就是干</description>
   <language>zh-Hans</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>负载均衡实现方式</title>
	  <link>/balancing-1</link>
	  <author></author>
	  <pubDate>2016-08-21T21:32:00+08:00</pubDate>
	  <guid>/balancing-1</guid>
	  <description><![CDATA[
	     <p>分布式必备技能，负载均衡实现方式<!--more--></p>
<h2 id="一负载均衡的基本概念">一、负载均衡的基本概念</h2>

<p>负载均衡是指，将请求分发到 多台 应用服务器，以此来分散 压力的一种架构方式，他是以集群的方式存在，并且当 某个节点挂掉的时候，可以自动 不再将请求分配到此节点。</p>

<h2 id="二-实现方式">二、 实现方式</h2>

<ol>
  <li>重定向</li>
</ol>

<p>这种方式，是通过将请求全部发送到前置机，由前置机通过算法 得出要分配给那台 应用服务器，然后响应给客户端，由客户端重定向到应用服务器的一种方式。</p>

<p>这种方式，由于每一个的请求，都要重定向一下，所以效率不是很高</p>

<ol>
  <li>反向代理</li>
</ol>

<p>这种方式，是通过在前置机，使用反向代理的方式，将请求分发到应用服务器，客户端无需再请求一次，实现方式通常有两种，一种是用交换机实现，还有一种是用nginx这一类的软件实现</p>

<p>这种方式，由于不需要再次重定向，所以较第一种，效率较高，但是由于请求和响应都是通过前置机来的，所以对前置机的考验很大</p>

<ol>
  <li>数据链路返回</li>
</ol>

<p>这种方式，通过给应用服务器设置虚拟IP，然后通过修改mac地址的方式，将请求分发出去，而应用服务器 收到请求后，可以直接响应给客户端，而不需要经过前置机。</p>

<p>这种方式，由于 前置机 只需要接受请求，不需要响应数据，所以，效率较第二种较高。</p>

<h2 id="三-负载均衡算法">三、 负载均衡算法</h2>

<ol>
  <li>轮询法</li>
</ol>

<p>将请求按顺序轮流地分配到后端服务器上，它均衡地对待后端的每一台服务器，而不关心服务器实际的连接数和当前的系统负载。</p>

<ol>
  <li>随机法</li>
</ol>

<p>通过系统的随机算法，根据后端服务器的列表大小值来随机选取其中的一台服务器进行访问。由概率统计理论可以得知，随着客户端调用服务端的次数增多，</p>

<p>其实际效果越来越接近于平均分配调用量到后端的每一台服务器，也就是轮询的结果。</p>

<ol>
  <li>源地址哈希法</li>
</ol>

<p>源地址哈希的思想是根据获取客户端的IP地址，通过哈希函数计算得到的一个数值，用该数值对服务器列表的大小进行取模运算，得到的结果便是客服端要访问服务器的序号。采用源地址哈希法进行负载均衡，同一IP地址的客户端，当后端服务器列表不变时，它每次都会映射到同一台后端服务器进行访问。</p>

<ol>
  <li>加权轮询法</li>
</ol>

<p>不同的后端服务器可能机器的配置和当前系统的负载并不相同，因此它们的抗压能力也不相同。给配置高、负载低的机器配置更高的权重，让其处理更多的请；而配置低、负载高的机器，给其分配较低的权重，降低其系统负载，加权轮询能很好地处理这一问题，并将请求顺序且按照权重分配到后端。</p>

<ol>
  <li>加权随机法</li>
</ol>

<p>与加权轮询法一样，加权随机法也根据后端机器的配置，系统的负载分配不同的权重。不同的是，它是按照权重随机请求后端服务器，而非顺序。</p>

<ol>
  <li>最小连接数法</li>
</ol>

<p>最小连接数算法比较灵活和智能，由于后端服务器的配置不尽相同，对于请求的处理有快有慢，它是根据后端服务器当前的连接情况，动态地选取其中当前 积压连接数最少的一台服务器来处理当前的请求，尽可能地提高后端服务的利用效率，将负责合理地分流到每一台服务器。</p>

	  ]]></description>
	</item>


</channel>
</rss>
