<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title></title>
   
   <link>http://www.v0ex.com</link>
   <description>不如自己打井，多谈钱，少谈情怀</description>
   <language>zh-Hans</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>红黑树</title>
	  <link>/arithmetic-4.html</link>
	  <author></author>
	  <pubDate>2016-09-19T05:12:33+08:00</pubDate>
	  <guid>/arithmetic-4.html</guid>
	  <description><![CDATA[
	     <p>java常用数据结构:红黑树(2-3查找树)
<!--more--></p>

<h2 id="红黑树">红黑树</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```
public void put(Key key,Value val){
    //查找key,找到则更新其值，否则为它新建一个节点
    root = put(root,key,val);
    root.color = BLACK;
}

private Node put(Node h,Key key,Value val){
    if(h == null){
        //标准的插入操作，和父节点用红连接相连
        return new Node(key,val,1,RED);
    }
    int cmp = key.compareTo(h.key);
    if(cmp&lt;0){
        h.left = put(h.left,key,val);
    }else if(cmp&gt;0){
        h.right = put(h.right,key,val);
    }else{
        h.val = val;
    }
    if(isRed(h.right)&amp;&amp;!isRed(h.left)){
        h = rotateLeft(h);
    }
    if(isRed(h.left)&amp;&amp;isRed(h.left.left)){
        h = rotateRight(h);
    }
    if(isRed(h.left)&amp;&amp;isRed(h.right)){
        flipColors(h);
    }
    h.N = size(h.left)+size(h.right)+1;
    return h;
}


//颜色转换
void flipColors(Node h){
    h.color = RED;
    h.left.color = BLACK;
    h.right.color = BLACK;
}

private static final boolean RED = true;
private static final boolean BLACK = false;

private class Node{
    //键
    Key key;
    //相关联的值
    Value val;
    //左右子树
    Node left ,right;
    //这棵子树中的结点总数
    int N;
    //由其父节点指向它的链接的颜色
    boolean color;

    Node(Key key,Value val,int N,boolean color){
        this.key = key;
        this.val = val;
        this.N = N;
        this.color = color;
    }
}

private boolean isRed(Node x){
    if(x==null){
        return false;
    }
    return x.color == RED;
}

//左旋转，把红色右链接转为红色左链接
Node rotateLeft(Node h){
    Node x = h.right;
    h.right = x.left;
    x.left = h;
    x.color = RED;
    x.N = h.N;
    h.N = 1+size(h.left) + size(h.right);
    return x;
}

//右旋转，把红色左链接转为红色右链接
Node rotateRight(Node h){
    Node x = h.left;
    h.left = x.right;
    x.right = h;
    x.color = RED;
    x.N = h.N;
    h.N = 1+size(h.left)+size(h.right);
    return x;
}


```
</code></pre></div></div>


	  ]]></description>
	</item>


</channel>
</rss>
