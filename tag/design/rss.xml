<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title></title>
   
   <link></link>
   <description>没啥说的，就是干</description>
   <language>zh-Hans</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>设计模式-单例模式</title>
	  <link>/design-singleton</link>
	  <author></author>
	  <pubDate>2016-06-21T19:18:00+08:00</pubDate>
	  <guid>/design-singleton</guid>
	  <description><![CDATA[
	     <p>设计模式之单例模式，最简单，最暴力，也最贱
<!--more-->
###创建型模式-单例模式</p>

<p>为实现类的唯一性，我们需要通过如下三个步骤对该类进行重构：</p>

<ol>
  <li>
    <p>为了确保实例的唯一性，我们需要禁止类的外部直接使用new来创建对象，因此需要将类的构造函数的可见性改为private，如下所示：</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>private Singleton(){}
</code></pre></div>    </div>
  </li>
  <li>
    <p>虽然类的外部无法使用new来创建对象，但是在Singleton的内部还是可以创建的，可见性只对类外有效。因此，我们可以在Singleton中创建并保存这个唯一实例。为了让外界可以访问这个唯一实例，需要在Singleton中定义一个静态的Singleton类型的私有成员变量，如下所示：</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>private static Singleton singleton = null;
</code></pre></div>    </div>
  </li>
  <li>
    <p>为了保证成员变量的封装性，我们将Singleton类型的singleton对象的可见性设置为private，但是外界该如何使用该成员变量并何时实例化该成员变量呢？那就是增加一个公有的静态方法，如下所示</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public static Singleton getInstance(){
    if(null == singleton){
        singleton = new Singleton();
    }
    return singleton;
}
</code></pre></div>    </div>
  </li>
</ol>

<p>单例模式有三个要点：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。</p>

<p>上述单例模式在多线程下也会出现获取实例不相同的情况，究其原因，当第一次调用getInstance()方法时，，金探测对象为null，因此系统将执行代码instance = new Singleton()，在此过程中，由于要对Singleton进行大量初始化工作，需要一段使劲来创建Singleton对象。而在此时，如果再一次调用getinstance()方法，由于instance尚未创建成功，仍为null，因此instance = new Singelton()将再次执行，导致最终创建了多个instance对象。</p>

<p>有两种方案可以解决上述问题，饿汉模式和懒汉模式</p>

<p><strong>饿汉模式</strong>直接上代码：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>饿汉模式
class Singleton{
    private static final Singleton instance = new Singleton();
    private Singleton(){}
    public static Singleton getInstance(){
        return intance;
    }
}
</code></pre></div></div>

<p>多线程模式下，饿汉模式不会出现创建多个单例对象的情况，可以确保单例对象的唯一性。</p>

<p><strong>懒汉模式</strong>直接上代码：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Singleton{
    private static Singleton instance = null;
    private Singleton(){}
    public static Singleton getInstance(){
        if(null == instance){
            synchronized(Singleton.class){
                instance = new Singleton();
            }
        }
        return instance;
    }
}
</code></pre></div></div>

<p>多线程情况下，上述懒汉模式还是会出现单例对象不唯一的情况，加入线程A进入synchronized锁定代码，线程B处于排队等待状态。但是当A执行完毕时，线程B并不知道实例已经创建，线程B继续创建实例，会导致产生多个单例对象。进一步改进，在synchronized中再进行一次判断，这种方式称为双重检查锁定(Double-Check Locking)。代码如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Singleton{
    private volatile static Singleton instance = null;
    private Singleton(){}
    public static Singleton getInstance(){
        if(null == instance){
            synchronized(Singleton.class){
                if(null == instance){
                    instance = new Singleton();
                }
            }
        }
        return instance;
    }
}
</code></pre></div></div>

<p>需要注意的是，如果使用双重检查锁定来实现懒汉模式，需要在静态成员变量instance之前增加修饰符volatile，被volatile修饰的成员变量可以确保多个线程都能够正确处理。由于volatile关键字会屏蔽Java虚拟机所做的一些代码优化，可能会导致系统运行效率降低。</p>

<p>可以从资源利用效率和资源初始化耗时两方面比较饿汉模式和懒汉模式的优劣。</p>

<p>有没有一种方式，可以克服两种模式的缺点呢，是的，有！</p>

<p>Initialization Demand Holder（IoDH），在IoDH中，我们在单例类中增加一个静态（static）内部类，在该类内部创建单例对象，再将该单例对象通过getInstance()方法返回给外部使用，代码如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Singleton{
    private Singleton(){}
    private static class HolderClass{
        private final static Singleton instance = new Singleton();
    }
    public static Singleton getInstance(){
        return HolderClass.instance;
    }
}
</code></pre></div></div>

<p>通过使用IoDH，既可以实现延迟加载，又可以保证线程安全，不影响系统性能，不失为一种好的单例模式实现方式，其缺点是与编程语言本身的特性相关，很多面向对象的语言不支持IoDH。</p>

	  ]]></description>
	</item>


</channel>
</rss>
