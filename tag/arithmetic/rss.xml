<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title></title>
   
   <link>http://v0ex.com</link>
   <description>不如自己打井，多谈钱，少谈情怀</description>
   <language>zh-Hans</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>MySQL锁表解决方法</title>
	  <link>/arithmetic-1.html</link>
	  <author></author>
	  <pubDate>2016-09-11T19:32:00+08:00</pubDate>
	  <guid>/arithmetic-1.html</guid>
	  <description><![CDATA[
	     <p>面试中经常涉及的算法问题
<!--more--></p>

<h2 id="快速排序">快速排序</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class Quick{
    public static void sort(Comparable[] a){
        //消除对输入的依赖
        StdRandom.shuffle(a);
        sort(a,0,a.length-1);
    }

    private static void sort(Comparable[] a,int lo,int hi){
        if (hi &lt;= lo) {
            return;
        }
        int j = partition(a,lo,hi);
        //将左半部分a[lo..j-1]排序
        sort(a,lo,j-1);
        //将右半部分a[j+1...hi]排序
        sort(a,j+1,hi);
    }

    private static int partition(Comparable[] a,int lo,int hi){
        //将数组切分为a[lo..i-1],a[i],a[i+1..hi]
        //左右扫描指针
        int i = lo,j=hi+1;
        //切分元素
        Comparable v = a[lo];
        while(true){
            //扫描左右，检查扫描是否结束并交换元素
            while(less(a[++i],v))if (i==hi) {
                break;
            }
            while(less(v,a[--j]))if (j==lo) {
                break;
            }
            exch(a,i,j);
        }
        //将v=a[j]放入到正确的位置
        exch(a,lo,j);
        //a[lo...j-1]&lt;=a[j]&lt;=a[j+1...hi]达成
        return j;
    }
}
</code></pre></div></div>

<h2 id="归并排序-自底向上">归并排序-自底向上</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//自底向上的归并排序
public class MergeBU{
    //归并所需的辅助数组
    private static Comparable[] aux;
    public static void sort(Comparable[] a){
        //进行logN次两两归并
        int N = a.length;
        aux = new Comparable[N];
        //sz子数组的大小
        for (int sz=1; sz&lt;N; sz = sz+sz) {
            //lo子数组的索引
            for (int lo = 0; lo &lt; N-sz; lo+=sz+sz) {
                merge(a,lo,lo+sz-1,Math.min(lo+sz+sz-1,N-1));
            }
        }
    }
}
</code></pre></div></div>

<h2 id="归并排序-自顶向下">归并排序-自顶向下</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//自顶向下的归并排序
public class Merge{
    //归并所需的辅助数组
    private static Comparable[] aux;
    public static void sort(Comparable[] a){
        //一次性分配空间
        aux = new Comparable[a.length];
        sort(a,0,a.length-1);
    }

    private static void sort(Comparable[] a, int lo,int hi){
        //将数组a[lo...hi]排序
        if (hi &lt;= lo) {
            return;
        }
        int mid = (lo + hi)/2;
        //将左半边排序
        sort(a,lo,mid);
        //将右边排序
        sort(a,mid,hi);
        //归并结果
        merge(a,lo,mid,hi);
    }
}
</code></pre></div></div>

<h2 id="原地归并的抽象方法">原地归并的抽象方法</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//原地归并的抽象方法
public static void merge(Comparable[] a,int lo, int mid, int hi){
    //将a[lo...mid]和a[mid+1...hi]归并
    int i = lo;j = mid+1;
    //将a[lo...hi]复制到aux[lo...hi]
    for (int k = lo; k&lt;=hi; k++) {
        aux[k] = a[k];
    }
    //归并回到a[lo...hi]
    for (int k = lo; k&lt;=hi; k++) {
        if (i &gt; mid) {
            //左半边用尽取右边的元素
            a[k] = aux[j++];
        }else if (j &gt; hi) {
            //右边的元素用尽取左边的元素
            a[k] = aux[i++]；
        }else if (less(aux[j],aux[i])) {
            //右半边的当前元素小于左半边的当前元素，取右半边的元素
            a[k] = aux[j++];
        }else{
            //右半边的当前元素大于等于左半边的当前元素，取左半边的元素
            a[k] = aux[i++];
        }
    }
}
</code></pre></div></div>

<h2 id="选择排序">选择排序</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//选择排序
public class Selection{
    public static void sort(Comparable[] a){
        //将a[]按升序排序
        int N = a.length;
        for (int i=0; i&lt;N; i++) {
            //将a[i]和a[i+1..N]中的最小元素交换
            //最小元素的索引
            int min = i;
            for (int j=i+1; i&lt;N; i++) {
                if (less(a[j],a[min])) {
                    min = j;
                }
            }
            exch(a,i,min);
        }
    }
}
</code></pre></div></div>

<h2 id="插入排序">插入排序</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//插入排序,插入排序对于部分有序的数组十分高效，也很适合小规模的数组
public class Insertion{
    public static void sort(Comparable[] a){
        //将a[]按升序排序
        int N = a.length;
        for (int i=1; i&lt;N ; i++) {
            //将a[i]插入到a[i-1],a[i-2],a[i-3]...之中
            for (int j=i; j&gt;0&amp;&amp;less(a[j]&lt;a[j-1]); j--) {
                exch(a,j,j-1);
            }
        }
    }
}
</code></pre></div></div>

<h2 id="排序类的模板">排序类的模板</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//排序算法类的模板
public class Example{
    public static void sort(Comparable[] a){

    }

    private static boolean less(Comparable v,Comparable w){
        return v.compareTo(w) &lt; 0;
    }

    private static void exch(Comparable[] a,int i, int j){
        Comparable t = a[i];
        a[i] = a[j];
        a[j] = t;
    }

    private static void show(Comparable[] a){
        //在单行中打印数组
        for (int i=0; i&lt; a.length; i++) {
            StdOut.print(a[i] + "");
        }
        StdOut.println();
    }

    public static boolean isSorted(Comparable[] a){
        //测试数组元素是否有序
        for (int i=1; i&lt; a.length; i++) {
            if (less(a[i],a[i-1])) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args){
        //从标准输入读取字符串，将它们排序并输出
        String[] a = In.readStrings();
        sort(a);
        assert isSorted(a);
        show(a);
    }
}

</code></pre></div></div>


	  ]]></description>
	</item>


</channel>
</rss>
