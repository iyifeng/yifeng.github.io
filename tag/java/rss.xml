<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title></title>
   
   <link>http://www.v0ex.com</link>
   <description>不如自己打井，多谈钱，少谈情怀</description>
   <language>zh-Hans</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>java自定义同步工具</title>
	  <link>/java-synchronizer-AQS.html</link>
	  <author></author>
	  <pubDate>2016-11-21T05:35:33+08:00</pubDate>
	  <guid>/java-synchronizer-AQS.html</guid>
	  <description><![CDATA[
	     <p>java并发学习笔记
<!--more--></p>

<h2 id="使用abstractqueuedsynchronizer实现的二元闭锁">使用AbstractQueuedSynchronizer实现的二元闭锁</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class OneShotLatch{
    private final Sync sync = new Sync();
    public void signal(){
        sync.releaseShared(0);
    }
    public void await() throws InterruptedException{
        sync.acquireSharedInterruptibly(0);
    }
    private class Sync extends AbstractQueuedSynchronizer{
        protected int tryAcquireShared(int ignored){
            //如果闭锁是开的(state==1),那么这个操作将成功，否则将失败
            return (getState()==1)?1:-1;
        }
        protected boolean tryReleaseShared(int ignored){
            //现在打开闭锁
            setState(1);
            //现在其他的线程可以获取该闭锁
            return true;
        }
    }
}
</code></pre></div></div>
<h2 id="aqs中获取操作和释放操作的标准形式">AQS中获取操作和释放操作的标准形式</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>boolean acquire() throws InterruptedException{
    while(当前状态不允许获取操作){
        if (需要阻塞获取请求) {
            如果当前线程不在队列中。则将其插入队列
            阻塞当前线程
        }else{
            返回失败
        }
    }
    可能更新同步器的状态
    如果线程位于队列中，则将其移除队列
    返回成功
}
void release(){
    更新同步器的状态
    if (新的状态允许某个被阻塞的线程获取成功) {
        解除队列中一个或多个线程的阻塞状态
    }
}
</code></pre></div></div>
<h2 id="使用lock来实现信号量">使用Lock来实现信号量</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class SemaphoreOnLock{
    private final Lock lock = new ReentrantLock();
    //条件谓词：permitsAvaliable(permits&gt;0)
    private final Condition permitsAvaliable = lock.newCondition();
    private int permits;
    SemaphoreOnLock(int initialPermits){
        lock.lock();
        try{
            permits = initialPermits;
        }finally{
            lock.unlock();
        }
    }
    //阻塞直到permitsAvaliable
    public void acuqire() throws InterruptedException{
        lock.lock();
        try{
            while(permits&lt;=0){
                permitsAvaliable.await();
            }
            --permits;
        }finally{
            lock.unlock();
        }
    }
    public void release(){
        lock.lock();
        try{
            ++permits;
            permitsAvaliable.signal();
        }finally{
            lock.unlock();
        }
    }
}
</code></pre></div></div>
<h2 id="使用显示条件变量的有界缓存">使用显示条件变量的有界缓存</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class ConditionBoundedBuffer&lt;T&gt;{
    protected final Lock lock = new ReentrantLock();
    //条件谓词：notFull(count &lt; item.length)
    private final Condition notFull = lock.newCondition();
    //条件谓词：notEmpty(count&gt;0)
    private final Condition notEmpty = lock.newCondition();
    private final T[] items = (T[])new Object[BUFFER_SIZE];
    private int tail,head,count;
    //阻塞并直到：notFull
    public void put(T x) throws InterruptedException{
        lock.lock();
        try{
            while(count==items.length){
                notFull.await();
            }
            items[tail]=x;
            if (++tail==items.length) {
                tail=0;
            }
            +=count;
            notEmpty.signal()；
        }finally{
            lock.unlock();
        }
    }
    //阻塞并直到：noEmpty
    public T take() throws InterruptedException{
        lock.lock();
        try{
            while(count==0){
                notEmpty.await();
            }
            T x = items[head];
            items[head]=null;
            if (++head==items.length) {
                head=0;
            }
            --count;
            notFull.signal();
            return x;
        }finally{
            lock.unlock();
        }
    }

}
</code></pre></div></div>
<h2 id="使用wait和notifyall来实现可重新关闭的阀门">使用wait和notifyAll来实现可重新关闭的阀门</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class ThreadGate{
    //条件谓词：opened-since(n)(isOpen||generation&gt;n)
    private boolean isOpen;
    private int generation;
    public synchronized void close(){
        isOpen = false;
    }
    public synchronized void open(){
        ++generation;
        isOpen = true;
        notifyAll();
    }
    //阻塞直到：opened-since(generation on empty)
    public synchronized void await() throws InterruptedException{
        int arrivalGeneration = generation;
        while(!isOpen&amp;&amp;arrivalGeneration==generation){
            wait();
        }
    }
}
</code></pre></div></div>

<h2 id="条件等待的标准形式">条件等待的标准形式</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>void stateDependentMethod() throws InterruptedException{
    //必须通过一个锁来保护条件谓词
    synchronized(lock){
        while(!conditionPredicate()){
            lock.wait();
            //现在对象处于合适的状态
        }
    }
}
</code></pre></div></div>
<h2 id="使用条件队列实现的有界缓存">使用条件队列实现的有界缓存</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class BoundedBuffer&lt;V&gt; extends BaseBoundedBuffer&lt;V&gt;{
    //条件谓词：not-full(!isFull())
    //条件谓词：not-empty(!isEmpty())
    public BoundedBuffer(int size){
        super(size);
    }
    //单次通知
    //阻塞并直到:not-full
    public synchronized void put(V v)throws InterruptedException{
        while(isFull()){
            wait();
        }
        doPut(v);
        notifyAll();
    }
    //条件通知
    public synchronized void put(V v)throws InterruptedException{
        while(isFull()){
            wait();
        }
        boolean wasEmpty = isEmpty();
        doPut(v);
        if (wasEmpty) {
            notifyAll();
        }
    }
    //阻塞并直到：not-empty
    public synchronized V take() throws InterruptedException{
        while(isEmpty()){
            wait;
        }
        V v = doTake();
        notifyAll();
        return v;
    }
}
</code></pre></div></div>
<h2 id="有界缓存实现的基类">有界缓存实现的基类</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public abstract class BaseBoundedBuffer&lt;V&gt;{
    private final V[] buf;
    private int tail;
    private int head;
    private int count;
    protected BaseBoundedBuffer(int capacity){
        this.buf = (V[])new Object[capacity];
    }
    protected synchronized final void doPut(V v){
        buf[tail] = v;
        if (++tail == buf.length) {
            tail = 0;
        }
        ++count;
    }
    protected synchronized final V doTake(){
        V v = buf[head];
        buf[head] = null;
        if (++head==buf.length) {
            head = 0;
        }
        --count;
        return v;
    }
    public synchronized final boolean isFull(){
        return count == buf.length;
    }
    public synchronized final boolean isEmpty(){
        return count == 0;
    }
}
</code></pre></div></div>

<h2 id="可阻塞的状态依赖操作的结构">可阻塞的状态依赖操作的结构</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>acuqire lock on object state 
while(precondition does not hold){
    release lock
    wait until precondition might hold
    optionally fail if interrupted or timeout expires
    reacquire lock
}
perform action 
    release lock
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>java编译时与运行时问与答</title>
	  <link>/java-interview-answer-1.html</link>
	  <author></author>
	  <pubDate>2016-11-07T03:40:03+08:00</pubDate>
	  <guid>/java-interview-answer-1.html</guid>
	  <description><![CDATA[
	     <p>java帮你入门-编译时与运行时
<!--more--></p>

<p>转载：https://zhuanlan.zhihu.com/p/22886648</p>

<p>参考：http://java-success.blogspot.com/2011/09/core-java-interview-answers-q1.html</p>

<p>在开发和设计的时候，我们需要考虑编译时，运行时以及构建时这三个概念。理解这几个概念可以更好地帮助你去了解一些基本的原理。下面是初学者晋级中级水平需要知道的一些问题。</p>

<p>Q.下面的代码片段中，行A和行B所标识的代码有什么区别呢？</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class ConstantFolding { 
    static final  int number1 = 5; 
    static final  int number2 = 6; 
    static int number3 = 5; 
    static int number4= 6; 
    public static void main(String[ ] args) { 
          int product1 = number1 * number2;         //line A

          int product2 = number3 * number4;         //line B

    }

}
</code></pre></div></div>

<p>A.在行A的代码中，product的值是在编译期计算的，行B则是在运行时计算的。如果你使用Java反编译器（例如，jd-gui）来反编译ConstantFolding.class文件的话，那么你就会从下面的结果里得到答案。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class ConstantFolding
{  
  static final int number1 = 5;  
  static final int number2 = 6;  
  static int number3 = 5;  
  static int number4 = 6; 

  public static void main(String[ ] args)
  {      
  int product1 = 30;      
  int product2 = number3 * number4;
  }
}
</code></pre></div></div>

<p><strong>常量折叠</strong>是一种Java编译器使用的优化技术。由于final变量的值不会改变，因此就可以对它们优化。Java反编译器和javap命令都是查看编译后的代码（例如，字节码）的利器。</p>

<p>Q.你能想出除了代码优化外，在什么情况下，查看编译过的代码是很有帮助的？</p>

<p>A.<strong>Java里的泛型是在编译时构造的</strong>，可以通过查看编译后的class文件来理解泛型，也可以通过查看它来解决泛型相关的问题。</p>

<p>Q.下面哪些是发生在编译时，运行时，或者两者都有？</p>

<p><strong>方法重载：这个是发生在编译时的</strong>。方法重载也被称为<strong>编译时多态</strong>，因为编译器可以根据参数的类型来选择使用哪个方法。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class {
     public static void evaluate(String param1);  // method #1
     public static void evaluate(int param1);   // method #2}
</code></pre></div></div>

<p>如果编译器要编译下面的语句的话：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>evaluate(“My Test Argument passed to param1”);
</code></pre></div></div>

<p>它会根据传入的参数是字符串常量，生成调用#1方法的字节码</p>

<p><strong>方法覆盖：这个是在运行时发生的</strong>。方法重载被称为<strong>运行时多态</strong>，因为在编译期编译器不知道并且没法知道该去调用哪个方法。JVM会在代码运行的时候做出决定。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class A {
   public int compute(int input) {          //method #3
        return 3 * input;
   }        
} 

public class B extends A {
   @Override
   public int compute(int input) {          //method #4
        return 4 * input;
   }        
}
</code></pre></div></div>

<p>子类B中的compute(..)方法重写了父类的compute(..)方法。如果编译器遇到下面的代码：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public int evaluate(A reference, int arg2)  {
     int result = reference.compute(arg2);
}
</code></pre></div></div>

<p>编译器是没法知道传入的参数reference的类型是A还是B。因此，只能够在运行时，根据赋给输入变量“reference”的对象的类型（例如，A或者B的实例）来决定调用方法#3还是方法#4.</p>

<p><strong>泛型（又称类型检验）：这个是发生在编译期的</strong>。编译器负责检查程序中类型的正确性，然后把使用了泛型的代码翻译或者重写成可以执行在当前JVM上的非泛型代码。这个技术被称为“<strong>类型擦除</strong>“。换句话来说，编译器会擦除所有在尖括号里的类型信息，来保证和版本1.4.0或者更早版本的JRE的兼容性。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>List&lt;String&gt; myList = new ArrayList&lt;String&gt;(10);
</code></pre></div></div>

<p>编译后成为了：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>List myList = new ArrayList(10);
</code></pre></div></div>

<p>注解（Annotation）：你可以使用运行时或者编译时的注解。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class B extends A {
   @Override
    public int compute(int input){      //method #4
        return 4 * input;
    }       
}
</code></pre></div></div>

<p><strong>@Override是一个简单的编译时注解</strong>，它可以用来捕获类似于在子类中把toString()写成tostring()这样的错误。在Java 5中，用户自定义的注解可以用注解处理工具(Anotation Process Tool ——APT)在编译时进行处理。到了Java 6，这个功能已经是编译器的一部分了。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class MyTest{
    @Test
     public void testEmptyness( ){
         org.junit.Assert.assertTrue(getList( ).isEmpty( ));
     } 
     private List getList( ){
             //implemenation goes here
     }
}
</code></pre></div></div>

<p>@Test是JUnit框架用来在<strong>运行时通过反射</strong>来决定调用测试类的哪个（些）方法的注解。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Test (timeout=100)
public void testTimeout( ) {
    while(true);   //infinite loop
}
</code></pre></div></div>

<p>如果运行时间超过100ms的话，上面的测试用例就会失败。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Test (expected=IndexOutOfBoundsException.class)
public void testOutOfBounds( ) {
       new ArrayList&lt;Object&gt;( ).get(1);
}
</code></pre></div></div>

<p>如果上面的代码在运行时没有抛出IndexOutOfBoundsException或者抛出的是其他的异常的话，那么这个用例就会失败。<strong>用户自定义的注解可以在运行时通过Java反射API里新增的AnnotatedElement和”Annotation”元素接口来处理</strong>。</p>

<p><strong>异常（Exception）</strong>：你可以使用运行时异常或者编译时异常。</p>

<p><strong>运行时异常（RuntimeException）也称作未检测的异常（unchecked exception）</strong>，这表示这种异常不需要编译器来检测。RuntimeException是所有可以在运行时抛出的异常的父类。一个方法除要捕获异常外，如果它执行的时候可能会抛出RuntimeException的子类，那么它就不需要用throw语句来声明抛出的异常。</p>

<p>例如：NullPointerException，ArrayIndexOutOfBoundsException，等等</p>

<p><strong>受检查异常（checked exception）都是编译器在编译时进行校验的</strong>，通过throws语句或者try{}cathch{} 语句块来处理检测异常。编译器会分析哪些异常会在执行一个方法或者构造函数的时候抛出。</p>

<p>面向切面的编程（Aspect Oriented Programming-AOP）：<strong>切面可以在编译时，运行时或，加载时或者运行时织入</strong>。</p>

<p>1.编译期：编译期织入是最简单的方式。如果你拥有应用的代码，你可以使用AOP编译器（例如，ajc – AspectJ编译器）对源码进行编译，然后输出织入完成的class文件。AOP编译的过程包含了waver的调用。切面的形式可以是源码的形式也可以是二进制的形式。如果切面需要针对受影响的类进行编译，那么你就需要在编译期织入了。</p>

<p>2.编译后：这种方式有时候也被称为二进制织入，它被用来织入已有的class文件和jar文件。和编译时织入方式相同，用来织入的切面可以是源码也可以是二进制的形式，并且它们自己也可以被织入切面。</p>

<p>3.装载期：这种织入是一种二进制织入，它被延迟到JVM加载class文件和定义类的时候。为了支持这种织入方式，需要显式地由运行时环境或者通过一种“织入代理（weaving agent）“来提供一个或者多个“织入类加载器（weaving class loader）”。</p>

<p>4.运行时：对已经加载到JVM里的类进行织入</p>

<p><strong>继承 – 发生在编译时，因为它是静态的</strong></p>

<p><strong>代理或者组合 – 发生在运行时，因为它更加具有动态性和灵活性</strong>。</p>

<p>Q.你有没有听说过“组合优于继承”这样的说法呢？如果听说过的话，那么你是怎么理解的呢？</p>

<p>A.<strong>继承是一种多态工具，而不是一种代码复用工具</strong>。有些开发者喜欢用继承的方式来实现代码复用，即使是在没有多态关系的情况下。是否使用继承的规则是继承只能用在类之间有“父子”关系的情况下。</p>

<p>1.不要仅仅为了代码复用而继承。当你使用组合来实现代码复用的时候，是不会产生继承关系的。过度使用继承（通过“extends”关键字）的话，如果修改了父类，会损坏所有的子类。这是因为子类和父类的紧耦合关系是在编译期产生的。</p>

<p>2.不要仅仅为了多态而继承。如果你的类之间没有继承关系，并且你想要实现多态，那么你可以通过接口和组合的方式来实现，这样不仅可以实现代码重用，同时也可以实现运行时的灵活性。</p>

<p>这就是为什么（Gang of Four）的设计模式里更倾向于使用组合而不是继承的原因。<strong>面试者</strong>会在你的答案里着重关注这几个词语——<strong>“耦合”</strong>，<strong>“静态还是动态”</strong>，以及<strong>“发生在编译期还是运行时”</strong>。运行时的灵活性可以通过组合来实现，因为类可以在运行时动态地根据一个结果有条件或者无条件地进行组合。但是继承却是静态的。</p>

<p>Q.<strong>你能够通过实例来区别编译期继承和运行时继承</strong>，以及指出Java支持哪种吗？</p>

<p>A.“继承”表示动作和属性从一个对象传递到另外一个对象的场景。<strong>Java语言本身只支持编译期继承</strong>，它是通过“extends”关键字来产生子类的方式实现的，如下所示：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class Parent {
    public String saySomething( ) {
              return “Parent is called”;
    }
} 

public class Child extends Parent {
     @Override
     public String saySomething( ) {
               return super.saySomething( ) +  “, Child is called”;
    }
}
</code></pre></div></div>

<p>“Child”类的saySomething()方法的调用会返回“Parent is called，Child is Called”，因为，子类的调用继承了父类的“Parenet is called”。关键字“super”是用来调用“Parent”类的方法。运行时继承表示在运行时构建父/子类关系。<strong>Java语言本身不支持运行时继承，但是有一种替代的方案叫做“代理”或者“组合”</strong>，它表示在运行时组件一个层次对象的子类。这样可以模拟运行时继承的实现。在Java里，<strong>代理的典型实现</strong>方式如下：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class Parent {
    public String saySomething( ) {
              return “Parent is called”;
    }
} 

public class Child  {
     public String saySomething( ) {
               return new Parent( ).saySomething( ) +  “, Child is called”;
    }
}
</code></pre></div></div>

<p>子类代理了父类的调用。<strong>组合</strong>可以按照下面的方式来实现：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class Child  {
     private Parent parent = null; 

     public Child( ){
               this.parent = new Parent( );
     } 

     public String saySomething( ) {
               return this.parent.saySomething( ) +  “, Child is called”;
    }
}
</code></pre></div></div>

	  ]]></description>
	</item>


</channel>
</rss>
