<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title></title>
   
   <link>http://www.v0ex.com</link>
   <description>不如自己打井，多谈钱，少谈情怀</description>
   <language>zh-Hans</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>java自定义同步工具</title>
	  <link>/java-synchronizer-AQS.html</link>
	  <author></author>
	  <pubDate>2016-11-21T05:35:33+08:00</pubDate>
	  <guid>/java-synchronizer-AQS.html</guid>
	  <description><![CDATA[
	     <p>java并发学习笔记
<!--more--></p>

<h2 id="使用abstractqueuedsynchronizer实现的二元闭锁">使用AbstractQueuedSynchronizer实现的二元闭锁</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class OneShotLatch{
    private final Sync sync = new Sync();
    public void signal(){
        sync.releaseShared(0);
    }
    public void await() throws InterruptedException{
        sync.acquireSharedInterruptibly(0);
    }
    private class Sync extends AbstractQueuedSynchronizer{
        protected int tryAcquireShared(int ignored){
            //如果闭锁是开的(state==1),那么这个操作将成功，否则将失败
            return (getState()==1)?1:-1;
        }
        protected boolean tryReleaseShared(int ignored){
            //现在打开闭锁
            setState(1);
            //现在其他的线程可以获取该闭锁
            return true;
        }
    }
}
</code></pre></div></div>
<h2 id="aqs中获取操作和释放操作的标准形式">AQS中获取操作和释放操作的标准形式</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>boolean acquire() throws InterruptedException{
    while(当前状态不允许获取操作){
        if (需要阻塞获取请求) {
            如果当前线程不在队列中。则将其插入队列
            阻塞当前线程
        }else{
            返回失败
        }
    }
    可能更新同步器的状态
    如果线程位于队列中，则将其移除队列
    返回成功
}
void release(){
    更新同步器的状态
    if (新的状态允许某个被阻塞的线程获取成功) {
        解除队列中一个或多个线程的阻塞状态
    }
}
</code></pre></div></div>
<h2 id="使用lock来实现信号量">使用Lock来实现信号量</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class SemaphoreOnLock{
    private final Lock lock = new ReentrantLock();
    //条件谓词：permitsAvaliable(permits&gt;0)
    private final Condition permitsAvaliable = lock.newCondition();
    private int permits;
    SemaphoreOnLock(int initialPermits){
        lock.lock();
        try{
            permits = initialPermits;
        }finally{
            lock.unlock();
        }
    }
    //阻塞直到permitsAvaliable
    public void acuqire() throws InterruptedException{
        lock.lock();
        try{
            while(permits&lt;=0){
                permitsAvaliable.await();
            }
            --permits;
        }finally{
            lock.unlock();
        }
    }
    public void release(){
        lock.lock();
        try{
            ++permits;
            permitsAvaliable.signal();
        }finally{
            lock.unlock();
        }
    }
}
</code></pre></div></div>
<h2 id="使用显示条件变量的有界缓存">使用显示条件变量的有界缓存</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class ConditionBoundedBuffer&lt;T&gt;{
    protected final Lock lock = new ReentrantLock();
    //条件谓词：notFull(count &lt; item.length)
    private final Condition notFull = lock.newCondition();
    //条件谓词：notEmpty(count&gt;0)
    private final Condition notEmpty = lock.newCondition();
    private final T[] items = (T[])new Object[BUFFER_SIZE];
    private int tail,head,count;
    //阻塞并直到：notFull
    public void put(T x) throws InterruptedException{
        lock.lock();
        try{
            while(count==items.length){
                notFull.await();
            }
            items[tail]=x;
            if (++tail==items.length) {
                tail=0;
            }
            +=count;
            notEmpty.signal()；
        }finally{
            lock.unlock();
        }
    }
    //阻塞并直到：noEmpty
    public T take() throws InterruptedException{
        lock.lock();
        try{
            while(count==0){
                notEmpty.await();
            }
            T x = items[head];
            items[head]=null;
            if (++head==items.length) {
                head=0;
            }
            --count;
            notFull.signal();
            return x;
        }finally{
            lock.unlock();
        }
    }

}
</code></pre></div></div>
<h2 id="使用wait和notifyall来实现可重新关闭的阀门">使用wait和notifyAll来实现可重新关闭的阀门</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class ThreadGate{
    //条件谓词：opened-since(n)(isOpen||generation&gt;n)
    private boolean isOpen;
    private int generation;
    public synchronized void close(){
        isOpen = false;
    }
    public synchronized void open(){
        ++generation;
        isOpen = true;
        notifyAll();
    }
    //阻塞直到：opened-since(generation on empty)
    public synchronized void await() throws InterruptedException{
        int arrivalGeneration = generation;
        while(!isOpen&amp;&amp;arrivalGeneration==generation){
            wait();
        }
    }
}
</code></pre></div></div>

<h2 id="条件等待的标准形式">条件等待的标准形式</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>void stateDependentMethod() throws InterruptedException{
    //必须通过一个锁来保护条件谓词
    synchronized(lock){
        while(!conditionPredicate()){
            lock.wait();
            //现在对象处于合适的状态
        }
    }
}
</code></pre></div></div>
<h2 id="使用条件队列实现的有界缓存">使用条件队列实现的有界缓存</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class BoundedBuffer&lt;V&gt; extends BaseBoundedBuffer&lt;V&gt;{
    //条件谓词：not-full(!isFull())
    //条件谓词：not-empty(!isEmpty())
    public BoundedBuffer(int size){
        super(size);
    }
    //单次通知
    //阻塞并直到:not-full
    public synchronized void put(V v)throws InterruptedException{
        while(isFull()){
            wait();
        }
        doPut(v);
        notifyAll();
    }
    //条件通知
    public synchronized void put(V v)throws InterruptedException{
        while(isFull()){
            wait();
        }
        boolean wasEmpty = isEmpty();
        doPut(v);
        if (wasEmpty) {
            notifyAll();
        }
    }
    //阻塞并直到：not-empty
    public synchronized V take() throws InterruptedException{
        while(isEmpty()){
            wait;
        }
        V v = doTake();
        notifyAll();
        return v;
    }
}
</code></pre></div></div>
<h2 id="有界缓存实现的基类">有界缓存实现的基类</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public abstract class BaseBoundedBuffer&lt;V&gt;{
    private final V[] buf;
    private int tail;
    private int head;
    private int count;
    protected BaseBoundedBuffer(int capacity){
        this.buf = (V[])new Object[capacity];
    }
    protected synchronized final void doPut(V v){
        buf[tail] = v;
        if (++tail == buf.length) {
            tail = 0;
        }
        ++count;
    }
    protected synchronized final V doTake(){
        V v = buf[head];
        buf[head] = null;
        if (++head==buf.length) {
            head = 0;
        }
        --count;
        return v;
    }
    public synchronized final boolean isFull(){
        return count == buf.length;
    }
    public synchronized final boolean isEmpty(){
        return count == 0;
    }
}
</code></pre></div></div>

<h2 id="可阻塞的状态依赖操作的结构">可阻塞的状态依赖操作的结构</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>acuqire lock on object state 
while(precondition does not hold){
    release lock
    wait until precondition might hold
    optionally fail if interrupted or timeout expires
    reacquire lock
}
perform action 
    release lock
</code></pre></div></div>

	  ]]></description>
	</item>


</channel>
</rss>
