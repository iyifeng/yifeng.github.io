<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BugCoder - Articles</title>
    <description>没啥说的，就是干</description>
    <link>
    </link>
    
      
      <item>
        <title>负载均衡实现方式</title>
        
          <description>&lt;h2 id=&quot;一负载均衡的基本概念&quot;&gt;一、负载均衡的基本概念&lt;/h2&gt;

</description>
        
        <pubDate>Sun, 21 Aug 2016 13:32:00 +0000</pubDate>
        <link>
        /balancing-1</link>
        <guid isPermaLink="true">/balancing-1</guid>
      </item>
      
    
      
      <item>
        <title>设计模式-单例模式</title>
        
          <description>&lt;p&gt;###创建型模式-单例模式&lt;/p&gt;

</description>
        
        <pubDate>Tue, 21 Jun 2016 11:18:00 +0000</pubDate>
        <link>
        /design-singleton</link>
        <guid isPermaLink="true">/design-singleton</guid>
      </item>
      
    
      
      <item>
        <title>Spring 传播机制实战</title>
        
          <description>&lt;p&gt;&amp;amp;nbsp&lt;/p&gt;
&lt;h3 id=&quot;场景佩奇要给乔治转账&quot;&gt;场景：佩奇要给乔治转账&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;基础操作：扣钱和加钱&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	/**
     * 取款操作
     * @param name 用户
     * @param usd 钱
     */
	void withdrawal(String name, BigDecimal usd);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	/**
     * 存款操作
     * @param name 用户
     * @param usd 钱
     */
    void deposit(String name, BigDecimal usd);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;业务操作：转账，pappe给george转账10000块&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	/**
     * 转账服务
     * @param oName 从该用户扣钱
     * @param dName 向该用户加钱
     */
    void transfer(String oName, String dName){
        balanceService.withdrawal(oName,new BigDecimal(10000));
        balanceService.deposit(dName,new BigDecimal(10000));
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;##别说话，就是干&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;propagation_required&lt;/p&gt;

    &lt;p&gt;Spring默认的事务传播机制，如果外层有事务则该事物加入外层事务，一起提交或回滚，如果没有事务则当前开启一个新事物，该机制满足大多数业务场景。&lt;/p&gt;

    &lt;p&gt;transfer、withdrawal、deposit传播机制都设置为&lt;strong&gt;propagation_required&lt;/strong&gt;，任何一个方法抛异常，整个事务都会回滚。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        
        <pubDate>Sun, 27 Sep 2015 10:18:00 +0000</pubDate>
        <link>
        /spring-propagation</link>
        <guid isPermaLink="true">/spring-propagation</guid>
      </item>
      
    
      
      <item>
        <title>位运算</title>
        
          <description>&lt;h2 id=&quot;1技巧一&quot;&gt;1.&lt;strong&gt;技巧一&lt;/strong&gt;&lt;/h2&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;x &amp;amp; (x - 1) 用于消去x最后一位的1
x = 1100
x - 1 = 1011
x &amp;amp; (x - 1) = 1000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;1.1.应用一&lt;/strong&gt; &lt;strong&gt;用 O(1) 时间检测整数 n 是否是 2 的幂次。&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//www.lintcode.com/zh-cn/problem/o1-check-power-of-2/&quot;&gt;http://www.lintcode.com/zh-cn/problem/o1-check-power-of-2/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;思路解析：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;N如果是2的幂次，则N满足两个条件。
  1.N &amp;gt;0 
  2.N的二进制表示中只有一个1
因为N的二进制表示中只有一个1，所以使用N &amp;amp; (N - 1)将N唯一的一个1消去，应该返回0。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.2.应用二&lt;/strong&gt; &lt;strong&gt;计算在一个 32 位的整数的二进制表式中有多少个 1。&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//www.lintcode.com/zh-cn/problem/count-1-in-binary/&quot;&gt;http://www.lintcode.com/zh-cn/problem/count-1-in-binary/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;思路解析：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由x &amp;amp; (x - 1)消去x最后一位的1可知。不断使用 x &amp;amp; (x - 1) 消去x最后一位的1，计算总共消去了多少次即可。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.3.应用三&lt;/strong&gt; &lt;strong&gt;如果要将整数A转换为B，需要改变多少个bit位？&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//www.lintcode.com/zh-cn/problem/flip-bits/&quot;&gt;http://www.lintcode.com/zh-cn/problem/flip-bits/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;解题思路：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个应用是上面一个应用的拓展。
思考将整数A转换为B，如果A和B在第i（0&amp;lt;=i&amp;lt;32）个位上相等，则不需要改变这个BIT位，如果在第i位上不相等，则需要改变这个BIT位。所以问题转化为了A和B有多少个BIT位不相同。联想到位运算有一个异或操作，相同为0，相异为1，所以问题转变成了计算A异或B之后这个数中1的个数。&lt;/p&gt;

&lt;h2 id=&quot;2技巧二&quot;&gt;2&lt;strong&gt;技巧二&lt;/strong&gt;&lt;/h2&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;使用二进制进行子集枚举
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;应用&lt;/strong&gt; &lt;strong&gt;给定一个含不同整数的集合，返回其所有的子集。&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//www.lintcode.com/zh-cn/problem/subsets/&quot;&gt;http://www.lintcode.com/zh-cn/problem/subsets/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;解题思路：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;思路就是使用一个正整数二进制表示的第i位是1还是0，代表集合的第i个数取或者不取。
所以从0到2^n-1总共2^n个整数，正好对应集合的2^n个子集。&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;S = {1,2,3}
N bit Combination
0 000 {}
1 001 {1}
2 010 {2}
3 011 {1,2}
4 100 {3}
5 101 {1,3}
6 110 {2,3}
7 111 {1,2,3}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3技巧三&quot;&gt;3&lt;strong&gt;技巧三&lt;/strong&gt;&lt;/h2&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a ^ b ^ b = a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3.1.应用一&lt;/strong&gt; &lt;strong&gt;数组中，只有一个数出现一次，剩下都出现两次，找出出现一次的数&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//www.lintcode.com/en/problem/single-number/&quot;&gt;http://www.lintcode.com/en/problem/single-number/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;思路解析：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;因为只有一个数恰好出现一个，剩下的都出现过两次，所以只要将所有的数异或起来，就可以得到唯一的那个数。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.2.应用二&lt;/strong&gt; &lt;strong&gt;数组中，只有一个数出现一次，剩下都出现三次，找出出现一次的。&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//www.lintcode.com/en/problem/single-number-iii/&quot;&gt;http://www.lintcode.com/en/problem/single-number-iii/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;解题思路：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;因为数是出现三次的，也就是说，对于每一个二进制位，如果只出现一次的数在该二进制位为1，那么这个二进制位在全部数字中出现次数无法被3整除。
膜3运算只有三种状态：00,01,10，因此我们可以使用两个位来表示当前位%3，对于每一位，我们让Two，One表示当前位的状态，B表示输入数字的对应位，Two+和One+表示输出状态。&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 0 0 0 0
 0 0 1 0 1
 0 1 0 0 1
 0 1 1 1 0
 1 0 0 1 0
 1 0 1 0 0
 One+ = (One ^ B) &amp;amp; (~Two)
 Two+ = (~One+) &amp;amp; (Two ^ B)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3.3.应用三&lt;/strong&gt; &lt;strong&gt;数组中，只有两个数出现一次，剩下都出现两次，找出出现一次的&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//www.lintcode.com/en/problem/single-number-iii/&quot;&gt;http://www.lintcode.com/en/problem/single-number-iii/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;思路解析：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;有了第一题的基本的思路，我们可以将数组分成两个部分，每个部分里只有一个元素出现一次，其余元素都出现两次。那么使用这种方法就可以找出这两个元素了。
不妨假设出现一个的两个元素是x，y，那么最终所有的元素异或的结果就是res  =  x^y。并且res！=0，那么我们可以找出res二进制表示中的某一位是1。对于原来的数组，我们可以根据这个位置是不是1就可以将数组分成两个部分。x，y在不同的两个子数组中。而且对于其他成对出现的元素，要么在x所在的那个数组，要么在y所在的那个数组。&lt;/p&gt;
</description>
        
        <pubDate>Sun, 27 Sep 2015 10:18:00 +0000</pubDate>
        <link>
        /bit-operation</link>
        <guid isPermaLink="true">/bit-operation</guid>
      </item>
      
    
  </channel>
</rss>
