<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title></title>
   
   <link>http://www.v0ex.com</link>
   <description>不如自己打井，多谈钱，少谈情怀</description>
   <language>zh-Hans</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>ARTS-第三周</title>
	  <link>/A-R-T-S-3.html</link>
	  <author></author>
	  <pubDate>2019-04-02T05:35:33+08:00</pubDate>
	  <guid>/A-R-T-S-3.html</guid>
	  <description><![CDATA[
	     <p>ARTS-第三周
<!--more--></p>
<h2 id="algorithm">Algorithm</h2>

<blockquote>
  <p><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/">3题：在一个字符串s中，找出不包含重复字符的子串的最大长度</a></p>
</blockquote>

<p><strong>解题思路1-暴力求解</strong></p>

<p>找出该字符串所有的子串，然后检查每个子串是否包含重复字符，在所有不含重复字符的子串中找出最大值。</p>

<ol>
  <li>用两层嵌套循环找出所有的子串。</li>
  <li>对每一个子串，判断是否包含重复字符，这里用到了Set集合来处理</li>
</ol>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public int lengthOfLongestSubstring(String s){
    int n = s.length();
    int max = 0;
    for(int i = 0;i &lt; n;i++){
        for(int j = i+1;j &lt;= n;j++){
            if(allUnique(s,i,j)){
                max = Math.max(ans, j - i);
            }
        }
    }
    return max;
}

/**
* 判断子串不包含重复字符
*/
public boolean allUnique(String s, int start, int end){
    Set&lt;Character&gt; set = new HashSet&lt;&gt;();
    for(int i = start;i &lt; end; i++){
        Character ch = s.charAt(i);
        if(set.contains(ch)){
            return false;
        }else{
            set.add(ch);
        }
    }
    return true;
}
</code></pre></div></div>

<p><strong>Note:</strong>时间复杂度<strong>O(n3)</strong>,空间复杂度<strong>O(min(n,m))</strong>，m是set集合的长度</p>

<hr />

<p><strong>解题思路2-滑动窗口</strong></p>

<p>在思路1中，我们总会重复检查某个子串是否包含重复字符，其实这都是不必要的检查。如果我们对一个子串Sij，从索引i到j-1已经做了检查而且不存在重复字符，那么我们只需要在判断s[j]这个字符是否已经存在于子串Sij中，如果不存在，那说明Sij是一个不含重复字符的子串。这样可以把时间复杂度从O(n3)降低到O(n2)。</p>

<p>我们还可以继续优化，使用HashSet当做一个滑动窗口，HashSet检查一个字符串是否存在，只需要O(1)的时间复杂度。</p>

<p><strong>滑动窗口是数组、字符串问题中常用的抽象概念</strong></p>

<p>滑动窗口是将两个边界滑动到某个方向的窗口。例如把[i,j)向右滑动1个单元，窗口就变成了[i+1,j+1)。</p>

<p>回到我们的题目，我们用一个HashSet存储当前窗口[i,j)中的字符集合(初始窗口i=j)，然后我们滑动j边界到更远，在滑动到S[j]表示的字符在HashSet中存在为止，此时j-i就等于当前不包含重复字符子串的长度。</p>

<p>按照上述的方法，滑动左边界i，一直到最后，就能得到答案。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public int lengthOfLongestSubstring(String s){
    int n = s.length();
    Set&lt;Character&gt; set = new HashSet&lt;&gt;();
    int max = 0, i=0,j=0;
    while(i&lt;n&amp;&amp;j&lt;n){
        if(!set.contains(s.charAt(j))){
            set.add(s.charAt(j++));
            max = Math.max(max,j-i);
        }else{
            set.remove(s.charAt(i++));
        }
    }
    return max;
}
</code></pre></div></div>

<blockquote>
  <p><a href="https://leetcode.com/problems/number-of-1-bits/">191题：求整数二进制中1的个数</a></p>
</blockquote>

<p><strong>解题思路1</strong></p>

<p>解决方法很直接，一个整数的二进制表示是32位，检查每一位，统计1的个数。从整数的最低有效位开始，向高位逐个检查是否为1。使用一个掩码m=1，任何数字和该掩码之间的位与(AND)操作都能够判断最低有效位是不是1。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>00000000000000000000000000000001 掩码
00000010010000100000000011000000 某个整数
AND
----------------------------------------------------
00000000000000000000000000000000
结果为0说明最后一位不是1
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>00000000000000000000000000000010 掩码左移一位
00000010010000100000000011000000 某个整数
AND
----------------------------------------------------
00000000000000000000000000000000
结果为0说明倒数第二位不是1
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>00000000000000000000000001000000 掩码左移6位
00000010010000100000000011000000 某个整数
AND
----------------------------------------------------
00000000000000000000000001000000
结果不为0说明倒数第七位是1
</code></pre></div></div>

<p><strong>代码</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public int hammingWeight(int n){
    int bits = 0;
    int mask = 1;
    for(int i=0;i&lt;32;i++){
        if((n&amp;mask)!=0){
            bits++;
        }
        mask &lt;&lt; 1;
    }
    return bits;
}
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public int lengthOfLongestSubstring(String s){
    int n = s.length();
    Set&lt;Character&gt; set = new HashSet&lt;&gt;();
    int ans = 0,i = 0,j=0;
    while(i&lt;n&amp;&amp;j&lt;n){
        if(!set.contains(s.charAt(j))){
            set.add(s.charAt(j++));
            ans = Math.max(ans,j-i);
        }else{
            set.remove(s.charAt(i++));
        }
    }
    return ans;
}
</code></pre></div></div>

<h2 id="review">Review</h2>

<blockquote>
  <p><a href="https://medium.com/@kevalpatel2106/why-should-you-learn-go-f607681fad65">你为什么要学习go语言</a></p>
</blockquote>

<p>Go将会成为未来的服务器语言。</p>

<p>这篇文章并不是要教你如何用Go语言来写“hello world”，而是讲述了现阶段的计算机软硬件情况以及为什么需要一种像Go这样的新语言。大概从<strong>硬件的限制</strong>、<strong>Go拥有goroutines</strong>(与Java语言相比，在64位的环境中，JVM会为每个线程分配1M的栈，默认的栈空间大小能够支持1000个线程，上百万上线程需要TB级别的RAM，而Go的栈是动态分配大小的，随着存储数据的数量而增长或抽缩，每创建一个Goroutine需要有大约4KB的栈，1GB的RAM就能支持250万个Goroutine)、<strong>Go直接运行在底层硬件上</strong>（相对于C/C++）它少了一层VM、用Go编写的代码易于维护，最后把Google也搬出来了，说是Go是由Google设计并支持的。</p>

<h2 id="tip">Tip</h2>

<p>Oracle+Mybaits比较问题：<strong>不等于(!=)</strong></p>

<p>工作中遇到一个问题，类似于求用户类型不等于VIP(常量值1)的用户信息。</p>

<p><strong>需求：</strong>数据库中该字段user_type的类型为varchar2，该字段值包含Null、1、0，要找出不为1的信息</p>

<p>SQL语句对应如下</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>select user_name from user where user_type != '1'
</code></pre></div></div>

<p>数据库选择MySQL，上述语句对应Mysql Example如下,能够查询中用户类型不等于VIP的用户信息。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>UserCriteria sql = new UserCriteria();
sql.or().andUserTypeNotEqualTo(UserType.VIP);
return mapper.selectByExample(sql);
</code></pre></div></div>

<p><strong>遇到问题：</strong>但是选择Oracle数据库，上述业务逻辑就会有问题，如果某条记录中user_type的字段值为null的话，查询不到该条记录。想要过滤中为null的信息，需要用到<strong>is null</strong></p>

<p><strong>解决方案：</strong> 找出不为1的信息，那么需要找出值为Null和值为0的并集。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>UserCriteria sql = new UserCriteria();
sql.createCriteria().andUserTypeIsNull();    sql.or(sql.createCriteria().andUserTypeEqualTo(UserType.SVIP));
return mapper.selectByExample(sql);
</code></pre></div></div>

<h2 id="share">Share</h2>

<p>Lucene学习笔记-<strong>TF-IDF检索模型</strong></p>

<p>tf-idf是<strong>term frequency-inverse document frequency</strong>的缩写，tf表示词项频率，df表示文档频率。</p>

<p><strong>tf-idf</strong>成为<strong>词频-逆文档频率</strong>，用于计算词项对于一个文档集或者语料库中一份文件的重要程度，也就是词项的权重。词项的重要性随着它再文档中出现的次数成正比增加，但同时会随着它在文档中集中出现的频率成反比。如果一个词在一篇文档中出现的频率非常高，说明其重要性比较高，但是如果这个词项在文档集中的其他文档中出现的频率也很高，那说明这个词项有可能是比较常见的。</p>

<h4 id="tf计算方法">TF计算方法</h4>

<ol>
  <li>
    <p>文档有长短之分，一篇长文章中某个词语出现3次，很难断定该文章与该词语有关，但是在一篇140字的短文章中出现3次，那该词语与该文章内容就会有很大的关系，以下计算方法可以削弱文档长度的影响</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>词频 tf= （单词在文档中出现的次数）/（文档的总次数）
</code></pre></div>    </div>
  </li>
  <li>
    <p>Lucene采用的词频标准化方法</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>词频tf = \sqrt 单词在文档中出现的次数
</code></pre></div>    </div>
  </li>
</ol>

<h4 id="df计算方法">DF计算方法</h4>

<p>df通常比较大，把它映射到一个较小的范围，用<strong>idf</strong>来表示，分母中+1是为了防止为0的情况</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>逆文档频率idf = log(文档集总的文档数/(包含某个单词的文档数+1))
</code></pre></div></div>

<p>词项的权重<strong>tf-idf</strong>的计算公式如下</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tf-idf = 词频tf * 逆文档频率idf
</code></pre></div></div>

<p>通过tf-idf可以把文档表示成n维的词项权重向量</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>document vector = (W_1,W_2...Wn)
</code></pre></div></div>


	  ]]></description>
	</item>

	<item>
	  <title>ARTS-第二周</title>
	  <link>/A-R-T-S-2.html</link>
	  <author></author>
	  <pubDate>2019-03-26T05:35:33+08:00</pubDate>
	  <guid>/A-R-T-S-2.html</guid>
	  <description><![CDATA[
	     <p>ARTS-第二周
<!--more--></p>
<h2 id="algorithm">Algorithm</h2>

<blockquote>
  <p><a href="https://leetcode.com/problems/subsets/">78题</a></p>
</blockquote>

<p>给定一组不同的整数，返回所有可能的子集。</p>

<p><strong>注意</strong>：解决方案中不能包含重复的子集。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入：nums = [1,2,3]
输出：
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
</code></pre></div></div>

<p><strong>解题思路1</strong> 非递归，非位运算，非深度优先</p>

<p>当遍历所有数字时，对于每一个新的数字，我们可以选择它，或者不选择它。</p>

<ol>
  <li>如果选择它，就把它加入到已生成的所有的子集中。</li>
  <li>如果不选它，只需要保留现有的子集。</li>
</ol>

<p>对于上述示例，{1,2,3}最初我们可以生成一个空的集合，[[]]</p>

<ul>
  <li>
    <p>对于数字1，如果不选1，结果集还是[]，如果选1，就把1添加到[]中，此时就获得新的子集[1]，合并两个子集，然后我们就获得了结果集[[],[1]]。</p>
  </li>
  <li>对于数字2，如果不选择2，结果集还是[[],[1]]。如果选择2，把2添加到现有的所有子集中，然后我们获得了新的子集[2],[1,2]，合并所有子集，我们就获得了结果集[[],[1],[2],[1,2]]</li>
  <li>同理对于数字3，选择以后，我们就获得了新的子集[3],[1,3],[2,3],[1,2,3]，合并所有子集，我们就获得了这组整数的所有子集集合[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public List&lt;List&lt;Integer&gt;&gt; subsets(int[] nums){
    List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;();
    result.add(new ArrayList&lt;&gt;());
    for(int n : nums){
        int size = result.size();
        for(int i=0;i&lt;size;i++){
            List&lt;Integer&gt; subset = new ArrayList&lt;&gt;(result.get(i));
            subset.add(n);
            result.add(subset);
        }
    }
    return result;
}
</code></pre></div></div>

<p><strong>解题思路2</strong> 递归</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public List&lt;List&lt;Integer&gt;&gt; subsets(int[] nums){
    List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;();
    Arrays.sort(nums);
    backtrack(result,new ArrayList&lt;&gt;(),nums,0);
    return result;
}

private void backtrack(List&lt;List&lt;Integer&gt;&gt; list,List&lt;Integer&gt; tempList,int[] nums,int start){
    list.add(new ArrayList&lt;&gt;(tempList));
    for(int i = start;i &lt; nums.length; i++){
        temp.add(nums[i]);
        backtrack(list,tempList,nums,i+1);
        tempList.remove(tempList.size()-1);
    }
}
</code></pre></div></div>

<h2 id="review">Review</h2>

<blockquote>
  <p><a href="https://medium.com/cheddar/q-a-instagrams-new-head-of-product-vishal-shah-8ebba9241591">对Instagram的新产品负责人的专访</a></p>
</blockquote>

<p>该访谈主要围绕Instagram进军电子商务的计划，谈论了Instagram两位联合创始人的原因，还有一个比较有争议的计划，那就是Facebook打算整合其一系列的应用程序，来提高各个应用的互通性。</p>

<p>关于Instagram上购物，类似于平时我们浏览图片时，可以点击图片然后跳转到购买页面。</p>

<p>也不知道是老外抄袭我们的技术还是我们抄袭老外的，哈哈。</p>

<h2 id="tip">Tip</h2>

<p>MongoDB作为一个内存数据库，对于数据的操作大部分都是在内存中的。日常使用MongoDB的过程中，常常会需要对数据进行分页。</p>

<p>常见的<strong>MongoTemplate分页</strong>查询</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import java.util.List;

/**
 * Created by bugcoder.
 */
public class PageModel&lt;T&gt; {
    //结果集
    private List&lt;T&gt; datas;

    //查询记录数
    private int rowCount;

    //每页多少条数据
    private int pageSize=20;

    //第几页
    private int pageNo=1;

    //跳过几条数
    private int skip=0;

    /**
     * 总页数
     * @return
     */
    public int getTotalPages(){
        return(rowCount+pageSize-1)/pageSize;
    }

    public int getRowCount() {
        return rowCount;
    }

    public void setRowCount(int rowCount) {
        this.rowCount = rowCount;
    }

    public int getPageSize() {
        return pageSize;
    }

    public void setPageSize(int pageSize) {
        this.pageSize = pageSize;
    }

    public int getPageNo() {
        return pageNo;
    }

    public void setPageNo(int pageNo) {
        this.pageNo = pageNo;
    }

    public int getSkip() {
        return skip;
    }

    public void setSkip(int skip) {
        this.skip = skip;
    }


    public List&lt;T&gt; getDatas() {
        return datas;
    }

    public void setDatas(List&lt;T&gt; datas) {
        this.datas = datas;
    }
}
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import java.io.Serializable;

/**
 * Created by bugcoder.
 */
public class MongoDataPageable implements Serializable,Pageable{

    private static final long serialVersionUID = 1L;

    // 当前页
    private Integer pageNo = 1;

    // 当前页面条数
    private Integer pageSize = 10;

    // 排序条件
    private Sort sort;

    @Override
    public int getPageNumber() {
        return getPageNo();
    }

    @Override
    public int getPageSize() {
        return pageSize;
    }

    @Override
    public int getOffset() {
        return (getPageNumber() - 1) * getPageSize();
    }

    @Override
    public Sort getSort() {
        return sort;
    }

    @Override
    public Pageable next() {
        return null;
    }

    @Override
    public Pageable previousOrFirst() {
        return null;
    }

    @Override
    public Pageable first() {
        return null;
    }

    @Override
    public boolean hasPrevious() {
        return false;
    }

    public Integer getPageNo() {
        return pageNo;
    }

    public void setPageNo(Integer pageNo) {
        this.pageNo = pageNo;
    }

    public void setPageSize(Integer pageSize) {
        this.pageSize = pageSize;
    }


    public void setSort(Sort sort) {
        this.sort = sort;
    }
}
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import com.ai.bugcodes.domain.File;
import com.ai.bugcodes.message.base.BaseMessage;
import com.ai.bugcodes.openapi.service.mongo.IImMessageFileMongoSV;
import com.ai.bugcodes.openapi.service.mongo.utils.MongoDataPageable;
import com.ai.bugcodes.openapi.service.mongo.utils.PageModel;
import com.mongodb.DBObject;
import com.mongodb.WriteResult;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Sort;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.BasicQuery;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by bugcoder.
 */
@Service
public class IImMessageFileMongoSV implements IImMessageFileMongoSV {

    @Autowired
    private MongoTemplate mongoTemplate;

    @Override
    public BaseMessage findByMessageId(String messageId) {
        return mongoTemplate.findOne(new Query(Criteria.where("id").is(messageId)),
                BaseMessage.class, "imMessage");
    }

    @Override
    public BaseMessage findByChannel(String channelId) {
        return mongoTemplate.findOne(new Query(Criteria.where("channel").is(channelId)),
                BaseMessage.class);
    }

    @Override
    public BaseMessage findByTypeAndChannel(String type, String channelId) {
        return mongoTemplate.findOne(
                new Query(Criteria.where("type").is(type).and("channel").is(channelId)),
                BaseMessage.class, "imMessage");
    }

    @Override
    public PageModel&lt;BaseMessage&gt; getImMessages(PageModel&lt;BaseMessage&gt; page, DBObject queryObject) {
        Query query = new BasicQuery(queryObject);
        // 查询总数
        int count = (int) mongoTemplate.count(query, BaseMessage.class);
        page.setRowCount(count);

        // 排序
        query.with(new Sort(Sort.Direction.ASC, "id"));
        query.skip(page.getSkip()).limit(page.getPageSize());
        List&lt;BaseMessage&gt; datas = mongoTemplate.find(query, BaseMessage.class);
        page.setDatas(datas);
        return page;
    }

    @Override
    public List&lt;BaseMessage&gt; findMessageByPage(int pageNo, int pageSize) {
        int startNum = (pageNo - 1) * pageSize;
        return mongoTemplate.find(new Query().skip(startNum).limit(pageSize), BaseMessage.class);
    }

    @Override
    public Page&lt;BaseMessage&gt; channelFilesQuery(Integer pageNum, Integer pageSize,
            String channelId) {
        MongoDataPageable pageable = new MongoDataPageable();
        Query query = new Query(
                Criteria.where("channel").is(channelId).and("type").in("file", "image"));
        List&lt;Sort.Order&gt; orders = new ArrayList&lt;Sort.Order&gt;(); // 排序
        orders.add(new Sort.Order(Sort.Direction.DESC, "ts"));
        Sort sort = new Sort(orders);

        // 开始页
        pageable.setPageNo(pageNum);
        // 每页条数
        pageable.setPageSize(pageSize);
        // 排序
        pageable.setSort(sort);
        // 查询出一共的条数
        Long count = mongoTemplate.count(query, BaseMessage.class);
        // 查询
        List&lt;BaseMessage&gt; list = mongoTemplate.find(query.with(pageable), BaseMessage.class);
        // 将集合与分页结果封装
        Page&lt;BaseMessage&gt; pagelist = new PageImpl&lt;BaseMessage&gt;(list, pageable, count);

        return pagelist;
    }

    @Override
    public Page&lt;BaseMessage&gt; myFilesQuery(Integer pageNum, Integer pageSize, String channelId,
            String accountId) {
        MongoDataPageable pageable = new MongoDataPageable();
        Query query = new Query(Criteria.where("channel").is(channelId).and("user").is(accountId)
                .and("type").in("file", "image"));
        List&lt;Sort.Order&gt; orders = new ArrayList&lt;Sort.Order&gt;(); // 排序
        orders.add(new Sort.Order(Sort.Direction.DESC, "ts"));
        Sort sort = new Sort(orders);
        // 开始页
        pageable.setPageNo(pageNum);
        // 每页条数
        pageable.setPageSize(pageSize);
        // 排序
        pageable.setSort(sort);
        // 查询出一共的条数
        Long count = mongoTemplate.count(query, BaseMessage.class);
        // 查询
        List&lt;BaseMessage&gt; list = mongoTemplate.find(query.with(pageable), BaseMessage.class);
        // 将集合与分页结果封装
        Page&lt;BaseMessage&gt; pagelist = new PageImpl&lt;BaseMessage&gt;(list, pageable, count);

        return pagelist;
    }

    @Override
    public void createCollectionsName(String collectionName){
        if (mongoTemplate.collectionExists(collectionName)){
            return;
        }
        mongoTemplate.createCollection(collectionName);
    }

    @Override
    public void insertFileData(File file,String collectionName) {
        if (mongoTemplate.collectionExists(collectionName)){
            mongoTemplate.insert(file,collectionName);
        }
    }

    public void addFileChannels(String channelId){
        Query query = new Query(Criteria.where("id").is("E41F1BA999114BCE848CA1F25D53944C"));
        Update update = new Update();
        update.addToSet("channels",channelId);
        WriteResult writeResult = mongoTemplate.upsert(query,update,File.class,"im_image");
        System.out.println("=========================");
        System.out.println(writeResult.toString());
    }
}
</code></pre></div></div>

<h2 id="share">Share</h2>

<p>Lucene学习笔记-<strong>布尔检索模型</strong></p>

<p>ElasticSearch基于Lucene实现，学习Lucene的底层实现，有利于我们更好的使用ES。</p>

<hr />

<ol>
  <li>
    <p>词项频率：同意单词在某个文档中出现的频率</p>
  </li>
  <li>
    <p>文档频率：出现某个词项的文档的数目</p>
  </li>
  <li>
    <p>倒排记录表：用于记录出现过某个单词的所有文档的文档列表，以及单词在改文档中出现的位置信息</p>
  </li>
  <li>
    <p>倒排文件：倒排记录表在磁盘中的物理存储文件称为倒排文件</p>
  </li>
  <li>
    <p>倒排索引：也被成为反向索引，一种索引方法，被用来存储在全文搜索下某个单词，在一个文档或一组文档中的存储位置的映射关系，它是文档检索系统中最常用的数据结构</p>
  </li>
</ol>

<p><strong>布尔检索模型</strong></p>

<p>布尔检索法是指利用布尔运算符连接各个检索词，然后由计算机进行逻辑运算，找出所需信息的一种检索方法。在改模型下，每篇文档被看成是一系列词的集合。</p>

<p>该模型下主要有三种逻辑运算</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>AND(*) 、OR(+) 、NOT(-) 对应java中的(&amp;)、(|)、(~)
</code></pre></div></div>

<p><strong>用法</strong></p>

<p>假如有如下单词-文档矩阵</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th style="text-align: right">doc1</th>
      <th style="text-align: center">doc2</th>
      <th>doc3</th>
      <th>doc4</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>谷歌</td>
      <td style="text-align: right">0</td>
      <td style="text-align: center">1</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <td>开源</td>
      <td style="text-align: right">0</td>
      <td style="text-align: center">1</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <td>大会</td>
      <td style="text-align: right">1</td>
      <td style="text-align: center">0</td>
      <td>0</td>
      <td>0</td>
    </tr>
  </tbody>
</table>

<p>想要查询包含谷歌和开源但不包含大会的文档：谷歌AND开源NOT大会</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0101
0101
0111(1000取反)
————————
0101
</code></pre></div></div>

<p><strong>结果：</strong> 向量中第2和第4个元素为1，则文档2和文档4是符合查询条件的文档</p>

<p>参考：«从Lucene到Elasticsearch全文检索实战»</p>


	  ]]></description>
	</item>

	<item>
	  <title>ARTS-第一周</title>
	  <link>/A-R-T-S-1.html</link>
	  <author></author>
	  <pubDate>2019-03-19T05:35:33+08:00</pubDate>
	  <guid>/A-R-T-S-1.html</guid>
	  <description><![CDATA[
	     <p>ARTS-第一周
<!--more--></p>
<h2 id="algorithm">Algorithm</h2>

<blockquote>
  <p><a href="https://leetcode.com/problems/container-with-most-water/">11题</a></p>
</blockquote>

<p>给定n个非负整数a1，a2，…，an，每个整数表示一个坐标(i，ai)。绘制n条垂直线，使得线i的两个端点位于（i，0）和（i，ai）。找到两条线，它们与x轴一起形成一个容器，使得该容器含有最多的水。</p>

<p>注意：容器不会倾斜，n至少为2</p>

<p><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg" alt="" /></p>

<p>上图由数组[1,8,6,2,5,4,8,3,7]表示。在这种情况下，容器可容纳的最大水面积（蓝色部分）为49。</p>

<p><strong>示例</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入：[1,8,6,2,5,4,8,3,7]
输出：49
</code></pre></div></div>

<p><strong>解题思路</strong></p>

<ol>
  <li>
    <p>求容器的最大可容纳面积，也就是求长方形的最大面积，长方形的长度是两点的索引间距，高度是某个数an</p>
  </li>
  <li>根据木桶原理，取短边，两数之间取较小的数，较小的数就是长方形的高度</li>
  <li>取数组中两点的索引间距，这个间距就是长方形的宽度</li>
  <li>找到两个数，使得长度 (Math.min(ax,ay)) * (y-x) 最大</li>
</ol>

<p><strong>方法1：暴力求解</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public int maxArea(int[] height){
    int maxArea = 0;
    for(int i = 0; i&lt;height.length;i++){
        for(int j=i+1;j&lt;height.length;j++){
            //宽度
            int w = j-i;
            //高度
            int h = Math.min(height[i],height[j]);
            //求最大面积
            maxArea = Math.max(maxArea,w*h);
        }
    }
    return maxArea;
}
</code></pre></div></div>

<p>时间复杂度O(n*n) , 时间复杂度O(1),请忽略局部变量w和h,这里只是为了便于理解</p>

<p><strong>方法2：两游标求解</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public int maxArea(int[] height){
    int maxArea = 0,left = 0,right=height.length-1;
    while(left &lt; right){
        maxArea = Math.max(maxArea,Math.min(height[left],height[right])*(right-left));
        if(height[left]&lt;height[right]){
            left++;
        }else{
            right++;
        }
    }
    return maxArea;
}
</code></pre></div></div>

<p>时间复杂度O(n) , 时间复杂度O(1)</p>

<h2 id="review">Review</h2>

<blockquote>
  <p><a href="https://humanparts.medium.com/can-a-75-year-old-do-psychedelics-7c2727ac542">75岁老大爷的魔幻之旅</a></p>
</blockquote>

<p>话说一个75岁的老大爷和一个58岁的大妈经常外出游玩，他俩喜欢冒险。通过冒险他们获得了很多非凡的体验，然后就想着成为神经大师。</p>

<p>老大爷年轻的时候，大概40年前吧，老大爷品尝过各种致幻剂，他说现在想起来那是的情景都不曾感到后悔，还说自己很热爱生活。他俩想通过致幻剂来成就神经大师之路，然后老大爷想了个好办法，就是吃毒蘑菇。</p>

<p>先让大妈吃，大爷守着大妈，观察大妈的反映，然后大爷再吃，大妈守着，好像两人都体会了非凡的感觉。</p>

<p>最后老大爷说这是他们晚年对于魔幻剂的探索。</p>

<p><strong>STOP</strong> 请原谅我满嘴跑火车，原文我大概能看懂三分之一吧。</p>

<p><strong>比较有意思的是下面的评论</strong>，一哥们留言说，他老爹都77岁了，在死之前，想在精神上获得更多对世界的了解，然后这哥们推荐他老爹吃毒蘑菇，吃毒蘑菇，吃毒蘑菇，还征求了下作者的意见。</p>

<p>真正花心思去读英文文章，找到了初中的感觉，句子的构成简直就是用单词尬组的。学习英语，一路磕磕绊绊，希望有所长进吧。</p>

<h2 id="tip">Tip</h2>

<p>在Spring项目中，在业务逻辑层的方法类中通常会加@Service或者@Component注解，当工程启动时，Spring会自动加载这些Bean到Spring容器中，业务逻辑中的许多方法类会有相同的处理逻辑，这时候可以考虑使用抽象工厂方法来简化代码。</p>

<p>先定义一个公共的抽象类</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public abstract class AbstractProcessor{

    /**
     * 通用处理逻辑
     */
    public abstract void apply();
}
</code></pre></div></div>

<p>具体业务实现类</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Service
public class ConcreteOneProcessor extends AbstractProcessor{
    
    public void apply(){
        //one的具体实现
    }
    
    public void doSome(){
        //one特定的一些实现
    }
}

@Service
public class ConcreteTwoProcessor extends AbstractProcessor{
    
    public void apply(){
        //two的具体实现
    }
    
    public void doAnother(){
        //one特定的一些实现
    }
}
</code></pre></div></div>

<p>工厂类</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Service
public class ProcessorFactory{

    private final Map&lt;String,AbstractProcessor&gt; m = new HashMap&lt;&gt;();
    
    @Autowired
    public ProcessorFactory(Map&lt;String,AbstractProcessor&gt; map){
        m.clear();
        map.forEach((k, v) -&gt; m.put(v.apply(), v));
    }
    
    /**
     * 工厂方法
     */
    public AbstractProcessor getInstance(String service){
        AbstractProcessor processor = m.get(service);
        return processor;
    }
}
</code></pre></div></div>

<p>使用</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Autowired
ProcessorFactory factory;

//获取具体的方法类
AbstractProcessor concreteOneProcessor = factory.getInstance("concreteOneProcessor");
</code></pre></div></div>

<h2 id="share">Share</h2>

<p>在项目开发过程中，多人协同工作，各模块负责人大都有沙箱环境的数据库的读写权限，调试过程中常常会遇到锁表的情况，有时为了节省时间就不去找DBA，可以试着通过以下方式，找到相关的锁表记录，kill掉相关进程。当然，提前是需要有数据库的root用户权限。</p>

<p>查看正在锁的事务</p>

<p>SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS;</p>

<p>查看等待锁的事务</p>

<p>SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS;</p>

<p>查询 正在执行的事务：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT * FROM information_schema.INNODB_TRX;
</code></pre></div></div>

<p>查看事务等待状况：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT
     r.trx_id waiting_trx_id,
     r.trx_mysql_thread_id waiting_thread,
     r.trx_query waiting_query,
     b.trx_id blocking_trx_id,
     b.trx_mysql_thread_id blocking_thread,
     b.trx_query blocking_query
FROM
     information_schema.innodb_lock_waits w
INNER JOIN information_schema.innodb_trx b ON b.trx_id = w.blocking_trx_id
INNER JOIN information_schema.innodb_trx r ON r.trx_id = w.requesting_trx_id;
</code></pre></div></div>

<p>查看更具体的事务等待状况：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT
     b.trx_state,
     e.state,
     e.time,
     d.state AS block_state,
     d.time AS block_time,
     a.requesting_trx_id,
     a.requested_lock_id,
     b.trx_query,
     b.trx_mysql_thread_id,
     a.blocking_trx_id,
     a.blocking_lock_id,
     c.trx_query AS block_trx_query,
     c.trx_mysql_thread_id AS block_trx_mysql_tread_id
FROM
     information_schema.INNODB_LOCK_WAITS a
LEFT JOIN information_schema.INNODB_TRX b ON a.requesting_trx_id = b.trx_id
LEFT JOIN information_schema.INNODB_TRX c ON a.blocking_trx_id = c.trx_id
LEFT JOIN information_schema.PROCESSLIST d ON c.trx_mysql_thread_id = d.id
LEFT JOIN information_schema.PROCESSLIST e ON b.trx_mysql_thread_id = e.id
ORDER BY
     a.requesting_trx_id;
</code></pre></div></div>

<p>查看未关闭的事务： –MySQL 5.6</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT
     a.trx_id,
     a.trx_state,
     a.trx_started,
     a.trx_query,
     b.ID,
     b.USER,
     b.DB,
     b.COMMAND,
     b.TIME,
     b.STATE,
     b.INFO,
     c.PROCESSLIST_USER,
     c.PROCESSLIST_HOST,
     c.PROCESSLIST_DB,
     d.SQL_TEXT
FROM
     information_schema.INNODB_TRX a
LEFT JOIN information_schema.PROCESSLIST b ON a.trx_mysql_thread_id = b.id
AND b.COMMAND = 'Sleep'
LEFT JOIN PERFORMANCE_SCHEMA.threads c ON b.id = c.PROCESSLIST_ID
LEFT JOIN PERFORMANCE_SCHEMA.events_statements_current d ON d.THREAD_ID = c.THREAD_ID;
</code></pre></div></div>

<p>–MySQL 5.5</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT
     a.trx_id,
     a.trx_state,
     a.trx_started,
     a.trx_query,
     b.ID,
     b. USER,
     b. HOST,
     b.DB,
     b.COMMAND,
     b.TIME,
     b.STATE,
     b.INFO
FROM
     information_schema.INNODB_TRX a
LEFT JOIN information_schema.PROCESSLIST b ON a.trx_mysql_thread_id = b.id
WHERE
     b.COMMAND = 'Sleep';
</code></pre></div></div>

<p>查看某段时间以来未关闭事务：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT
        trx_id,
        trx_started,
        trx_mysql_thread_id
FROM
        INFORMATION_SCHEMA.INNODB_TRX
WHERE
        trx_started &lt; date_sub(now(), INTERVAL 1 MINUTE)
AND trx_operation_state IS NULL
AND trx_query IS NULL;
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>java自定义同步工具</title>
	  <link>/java-synchronizer-AQS.html</link>
	  <author></author>
	  <pubDate>2016-11-21T05:35:33+08:00</pubDate>
	  <guid>/java-synchronizer-AQS.html</guid>
	  <description><![CDATA[
	     <p>java并发学习笔记
<!--more--></p>

<h2 id="使用abstractqueuedsynchronizer实现的二元闭锁">使用AbstractQueuedSynchronizer实现的二元闭锁</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class OneShotLatch{
    private final Sync sync = new Sync();
    public void signal(){
        sync.releaseShared(0);
    }
    public void await() throws InterruptedException{
        sync.acquireSharedInterruptibly(0);
    }
    private class Sync extends AbstractQueuedSynchronizer{
        protected int tryAcquireShared(int ignored){
            //如果闭锁是开的(state==1),那么这个操作将成功，否则将失败
            return (getState()==1)?1:-1;
        }
        protected boolean tryReleaseShared(int ignored){
            //现在打开闭锁
            setState(1);
            //现在其他的线程可以获取该闭锁
            return true;
        }
    }
}
</code></pre></div></div>
<h2 id="aqs中获取操作和释放操作的标准形式">AQS中获取操作和释放操作的标准形式</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>boolean acquire() throws InterruptedException{
    while(当前状态不允许获取操作){
        if (需要阻塞获取请求) {
            如果当前线程不在队列中。则将其插入队列
            阻塞当前线程
        }else{
            返回失败
        }
    }
    可能更新同步器的状态
    如果线程位于队列中，则将其移除队列
    返回成功
}
void release(){
    更新同步器的状态
    if (新的状态允许某个被阻塞的线程获取成功) {
        解除队列中一个或多个线程的阻塞状态
    }
}
</code></pre></div></div>
<h2 id="使用lock来实现信号量">使用Lock来实现信号量</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class SemaphoreOnLock{
    private final Lock lock = new ReentrantLock();
    //条件谓词：permitsAvaliable(permits&gt;0)
    private final Condition permitsAvaliable = lock.newCondition();
    private int permits;
    SemaphoreOnLock(int initialPermits){
        lock.lock();
        try{
            permits = initialPermits;
        }finally{
            lock.unlock();
        }
    }
    //阻塞直到permitsAvaliable
    public void acuqire() throws InterruptedException{
        lock.lock();
        try{
            while(permits&lt;=0){
                permitsAvaliable.await();
            }
            --permits;
        }finally{
            lock.unlock();
        }
    }
    public void release(){
        lock.lock();
        try{
            ++permits;
            permitsAvaliable.signal();
        }finally{
            lock.unlock();
        }
    }
}
</code></pre></div></div>
<h2 id="使用显示条件变量的有界缓存">使用显示条件变量的有界缓存</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class ConditionBoundedBuffer&lt;T&gt;{
    protected final Lock lock = new ReentrantLock();
    //条件谓词：notFull(count &lt; item.length)
    private final Condition notFull = lock.newCondition();
    //条件谓词：notEmpty(count&gt;0)
    private final Condition notEmpty = lock.newCondition();
    private final T[] items = (T[])new Object[BUFFER_SIZE];
    private int tail,head,count;
    //阻塞并直到：notFull
    public void put(T x) throws InterruptedException{
        lock.lock();
        try{
            while(count==items.length){
                notFull.await();
            }
            items[tail]=x;
            if (++tail==items.length) {
                tail=0;
            }
            +=count;
            notEmpty.signal()；
        }finally{
            lock.unlock();
        }
    }
    //阻塞并直到：noEmpty
    public T take() throws InterruptedException{
        lock.lock();
        try{
            while(count==0){
                notEmpty.await();
            }
            T x = items[head];
            items[head]=null;
            if (++head==items.length) {
                head=0;
            }
            --count;
            notFull.signal();
            return x;
        }finally{
            lock.unlock();
        }
    }

}
</code></pre></div></div>
<h2 id="使用wait和notifyall来实现可重新关闭的阀门">使用wait和notifyAll来实现可重新关闭的阀门</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class ThreadGate{
    //条件谓词：opened-since(n)(isOpen||generation&gt;n)
    private boolean isOpen;
    private int generation;
    public synchronized void close(){
        isOpen = false;
    }
    public synchronized void open(){
        ++generation;
        isOpen = true;
        notifyAll();
    }
    //阻塞直到：opened-since(generation on empty)
    public synchronized void await() throws InterruptedException{
        int arrivalGeneration = generation;
        while(!isOpen&amp;&amp;arrivalGeneration==generation){
            wait();
        }
    }
}
</code></pre></div></div>

<h2 id="条件等待的标准形式">条件等待的标准形式</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>void stateDependentMethod() throws InterruptedException{
    //必须通过一个锁来保护条件谓词
    synchronized(lock){
        while(!conditionPredicate()){
            lock.wait();
            //现在对象处于合适的状态
        }
    }
}
</code></pre></div></div>
<h2 id="使用条件队列实现的有界缓存">使用条件队列实现的有界缓存</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class BoundedBuffer&lt;V&gt; extends BaseBoundedBuffer&lt;V&gt;{
    //条件谓词：not-full(!isFull())
    //条件谓词：not-empty(!isEmpty())
    public BoundedBuffer(int size){
        super(size);
    }
    //单次通知
    //阻塞并直到:not-full
    public synchronized void put(V v)throws InterruptedException{
        while(isFull()){
            wait();
        }
        doPut(v);
        notifyAll();
    }
    //条件通知
    public synchronized void put(V v)throws InterruptedException{
        while(isFull()){
            wait();
        }
        boolean wasEmpty = isEmpty();
        doPut(v);
        if (wasEmpty) {
            notifyAll();
        }
    }
    //阻塞并直到：not-empty
    public synchronized V take() throws InterruptedException{
        while(isEmpty()){
            wait;
        }
        V v = doTake();
        notifyAll();
        return v;
    }
}
</code></pre></div></div>
<h2 id="有界缓存实现的基类">有界缓存实现的基类</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public abstract class BaseBoundedBuffer&lt;V&gt;{
    private final V[] buf;
    private int tail;
    private int head;
    private int count;
    protected BaseBoundedBuffer(int capacity){
        this.buf = (V[])new Object[capacity];
    }
    protected synchronized final void doPut(V v){
        buf[tail] = v;
        if (++tail == buf.length) {
            tail = 0;
        }
        ++count;
    }
    protected synchronized final V doTake(){
        V v = buf[head];
        buf[head] = null;
        if (++head==buf.length) {
            head = 0;
        }
        --count;
        return v;
    }
    public synchronized final boolean isFull(){
        return count == buf.length;
    }
    public synchronized final boolean isEmpty(){
        return count == 0;
    }
}
</code></pre></div></div>

<h2 id="可阻塞的状态依赖操作的结构">可阻塞的状态依赖操作的结构</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>acuqire lock on object state 
while(precondition does not hold){
    release lock
    wait until precondition might hold
    optionally fail if interrupted or timeout expires
    reacquire lock
}
perform action 
    release lock
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>java编译时与运行时问与答</title>
	  <link>/java-interview-answer-1.html</link>
	  <author></author>
	  <pubDate>2016-11-07T03:40:03+08:00</pubDate>
	  <guid>/java-interview-answer-1.html</guid>
	  <description><![CDATA[
	     <p>java帮你入门-编译时与运行时
<!--more--></p>

<p>转载：https://zhuanlan.zhihu.com/p/22886648</p>

<p>参考：http://java-success.blogspot.com/2011/09/core-java-interview-answers-q1.html</p>

<p>在开发和设计的时候，我们需要考虑编译时，运行时以及构建时这三个概念。理解这几个概念可以更好地帮助你去了解一些基本的原理。下面是初学者晋级中级水平需要知道的一些问题。</p>

<p>Q.下面的代码片段中，行A和行B所标识的代码有什么区别呢？</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class ConstantFolding { 
    static final  int number1 = 5; 
    static final  int number2 = 6; 
    static int number3 = 5; 
    static int number4= 6; 
    public static void main(String[ ] args) { 
          int product1 = number1 * number2;         //line A

          int product2 = number3 * number4;         //line B

    }

}
</code></pre></div></div>

<p>A.在行A的代码中，product的值是在编译期计算的，行B则是在运行时计算的。如果你使用Java反编译器（例如，jd-gui）来反编译ConstantFolding.class文件的话，那么你就会从下面的结果里得到答案。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class ConstantFolding
{  
  static final int number1 = 5;  
  static final int number2 = 6;  
  static int number3 = 5;  
  static int number4 = 6; 

  public static void main(String[ ] args)
  {      
  int product1 = 30;      
  int product2 = number3 * number4;
  }
}
</code></pre></div></div>

<p><strong>常量折叠</strong>是一种Java编译器使用的优化技术。由于final变量的值不会改变，因此就可以对它们优化。Java反编译器和javap命令都是查看编译后的代码（例如，字节码）的利器。</p>

<p>Q.你能想出除了代码优化外，在什么情况下，查看编译过的代码是很有帮助的？</p>

<p>A.<strong>Java里的泛型是在编译时构造的</strong>，可以通过查看编译后的class文件来理解泛型，也可以通过查看它来解决泛型相关的问题。</p>

<p>Q.下面哪些是发生在编译时，运行时，或者两者都有？</p>

<p><strong>方法重载：这个是发生在编译时的</strong>。方法重载也被称为<strong>编译时多态</strong>，因为编译器可以根据参数的类型来选择使用哪个方法。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class {
     public static void evaluate(String param1);  // method #1
     public static void evaluate(int param1);   // method #2}
</code></pre></div></div>

<p>如果编译器要编译下面的语句的话：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>evaluate(“My Test Argument passed to param1”);
</code></pre></div></div>

<p>它会根据传入的参数是字符串常量，生成调用#1方法的字节码</p>

<p><strong>方法覆盖：这个是在运行时发生的</strong>。方法重载被称为<strong>运行时多态</strong>，因为在编译期编译器不知道并且没法知道该去调用哪个方法。JVM会在代码运行的时候做出决定。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class A {
   public int compute(int input) {          //method #3
        return 3 * input;
   }        
} 

public class B extends A {
   @Override
   public int compute(int input) {          //method #4
        return 4 * input;
   }        
}
</code></pre></div></div>

<p>子类B中的compute(..)方法重写了父类的compute(..)方法。如果编译器遇到下面的代码：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public int evaluate(A reference, int arg2)  {
     int result = reference.compute(arg2);
}
</code></pre></div></div>

<p>编译器是没法知道传入的参数reference的类型是A还是B。因此，只能够在运行时，根据赋给输入变量“reference”的对象的类型（例如，A或者B的实例）来决定调用方法#3还是方法#4.</p>

<p><strong>泛型（又称类型检验）：这个是发生在编译期的</strong>。编译器负责检查程序中类型的正确性，然后把使用了泛型的代码翻译或者重写成可以执行在当前JVM上的非泛型代码。这个技术被称为“<strong>类型擦除</strong>“。换句话来说，编译器会擦除所有在尖括号里的类型信息，来保证和版本1.4.0或者更早版本的JRE的兼容性。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>List&lt;String&gt; myList = new ArrayList&lt;String&gt;(10);
</code></pre></div></div>

<p>编译后成为了：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>List myList = new ArrayList(10);
</code></pre></div></div>

<p>注解（Annotation）：你可以使用运行时或者编译时的注解。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class B extends A {
   @Override
    public int compute(int input){      //method #4
        return 4 * input;
    }       
}
</code></pre></div></div>

<p><strong>@Override是一个简单的编译时注解</strong>，它可以用来捕获类似于在子类中把toString()写成tostring()这样的错误。在Java 5中，用户自定义的注解可以用注解处理工具(Anotation Process Tool ——APT)在编译时进行处理。到了Java 6，这个功能已经是编译器的一部分了。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class MyTest{
    @Test
     public void testEmptyness( ){
         org.junit.Assert.assertTrue(getList( ).isEmpty( ));
     } 
     private List getList( ){
             //implemenation goes here
     }
}
</code></pre></div></div>

<p>@Test是JUnit框架用来在<strong>运行时通过反射</strong>来决定调用测试类的哪个（些）方法的注解。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Test (timeout=100)
public void testTimeout( ) {
    while(true);   //infinite loop
}
</code></pre></div></div>

<p>如果运行时间超过100ms的话，上面的测试用例就会失败。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Test (expected=IndexOutOfBoundsException.class)
public void testOutOfBounds( ) {
       new ArrayList&lt;Object&gt;( ).get(1);
}
</code></pre></div></div>

<p>如果上面的代码在运行时没有抛出IndexOutOfBoundsException或者抛出的是其他的异常的话，那么这个用例就会失败。<strong>用户自定义的注解可以在运行时通过Java反射API里新增的AnnotatedElement和”Annotation”元素接口来处理</strong>。</p>

<p><strong>异常（Exception）</strong>：你可以使用运行时异常或者编译时异常。</p>

<p><strong>运行时异常（RuntimeException）也称作未检测的异常（unchecked exception）</strong>，这表示这种异常不需要编译器来检测。RuntimeException是所有可以在运行时抛出的异常的父类。一个方法除要捕获异常外，如果它执行的时候可能会抛出RuntimeException的子类，那么它就不需要用throw语句来声明抛出的异常。</p>

<p>例如：NullPointerException，ArrayIndexOutOfBoundsException，等等</p>

<p><strong>受检查异常（checked exception）都是编译器在编译时进行校验的</strong>，通过throws语句或者try{}cathch{} 语句块来处理检测异常。编译器会分析哪些异常会在执行一个方法或者构造函数的时候抛出。</p>

<p>面向切面的编程（Aspect Oriented Programming-AOP）：<strong>切面可以在编译时，运行时或，加载时或者运行时织入</strong>。</p>

<p>1.编译期：编译期织入是最简单的方式。如果你拥有应用的代码，你可以使用AOP编译器（例如，ajc – AspectJ编译器）对源码进行编译，然后输出织入完成的class文件。AOP编译的过程包含了waver的调用。切面的形式可以是源码的形式也可以是二进制的形式。如果切面需要针对受影响的类进行编译，那么你就需要在编译期织入了。</p>

<p>2.编译后：这种方式有时候也被称为二进制织入，它被用来织入已有的class文件和jar文件。和编译时织入方式相同，用来织入的切面可以是源码也可以是二进制的形式，并且它们自己也可以被织入切面。</p>

<p>3.装载期：这种织入是一种二进制织入，它被延迟到JVM加载class文件和定义类的时候。为了支持这种织入方式，需要显式地由运行时环境或者通过一种“织入代理（weaving agent）“来提供一个或者多个“织入类加载器（weaving class loader）”。</p>

<p>4.运行时：对已经加载到JVM里的类进行织入</p>

<p><strong>继承 – 发生在编译时，因为它是静态的</strong></p>

<p><strong>代理或者组合 – 发生在运行时，因为它更加具有动态性和灵活性</strong>。</p>

<p>Q.你有没有听说过“组合优于继承”这样的说法呢？如果听说过的话，那么你是怎么理解的呢？</p>

<p>A.<strong>继承是一种多态工具，而不是一种代码复用工具</strong>。有些开发者喜欢用继承的方式来实现代码复用，即使是在没有多态关系的情况下。是否使用继承的规则是继承只能用在类之间有“父子”关系的情况下。</p>

<p>1.不要仅仅为了代码复用而继承。当你使用组合来实现代码复用的时候，是不会产生继承关系的。过度使用继承（通过“extends”关键字）的话，如果修改了父类，会损坏所有的子类。这是因为子类和父类的紧耦合关系是在编译期产生的。</p>

<p>2.不要仅仅为了多态而继承。如果你的类之间没有继承关系，并且你想要实现多态，那么你可以通过接口和组合的方式来实现，这样不仅可以实现代码重用，同时也可以实现运行时的灵活性。</p>

<p>这就是为什么（Gang of Four）的设计模式里更倾向于使用组合而不是继承的原因。<strong>面试者</strong>会在你的答案里着重关注这几个词语——<strong>“耦合”</strong>，<strong>“静态还是动态”</strong>，以及<strong>“发生在编译期还是运行时”</strong>。运行时的灵活性可以通过组合来实现，因为类可以在运行时动态地根据一个结果有条件或者无条件地进行组合。但是继承却是静态的。</p>

<p>Q.<strong>你能够通过实例来区别编译期继承和运行时继承</strong>，以及指出Java支持哪种吗？</p>

<p>A.“继承”表示动作和属性从一个对象传递到另外一个对象的场景。<strong>Java语言本身只支持编译期继承</strong>，它是通过“extends”关键字来产生子类的方式实现的，如下所示：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class Parent {
    public String saySomething( ) {
              return “Parent is called”;
    }
} 

public class Child extends Parent {
     @Override
     public String saySomething( ) {
               return super.saySomething( ) +  “, Child is called”;
    }
}
</code></pre></div></div>

<p>“Child”类的saySomething()方法的调用会返回“Parent is called，Child is Called”，因为，子类的调用继承了父类的“Parenet is called”。关键字“super”是用来调用“Parent”类的方法。运行时继承表示在运行时构建父/子类关系。<strong>Java语言本身不支持运行时继承，但是有一种替代的方案叫做“代理”或者“组合”</strong>，它表示在运行时组件一个层次对象的子类。这样可以模拟运行时继承的实现。在Java里，<strong>代理的典型实现</strong>方式如下：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class Parent {
    public String saySomething( ) {
              return “Parent is called”;
    }
} 

public class Child  {
     public String saySomething( ) {
               return new Parent( ).saySomething( ) +  “, Child is called”;
    }
}
</code></pre></div></div>

<p>子类代理了父类的调用。<strong>组合</strong>可以按照下面的方式来实现：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class Child  {
     private Parent parent = null; 

     public Child( ){
               this.parent = new Parent( );
     } 

     public String saySomething( ) {
               return this.parent.saySomething( ) +  “, Child is called”;
    }
}
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>红黑树</title>
	  <link>/arithmetic-4.html</link>
	  <author></author>
	  <pubDate>2016-09-19T05:12:33+08:00</pubDate>
	  <guid>/arithmetic-4.html</guid>
	  <description><![CDATA[
	     <p>java常用数据结构:红黑树(2-3查找树)
<!--more--></p>

<h2 id="红黑树">红黑树</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```
public void put(Key key,Value val){
    //查找key,找到则更新其值，否则为它新建一个节点
    root = put(root,key,val);
    root.color = BLACK;
}

private Node put(Node h,Key key,Value val){
    if(h == null){
        //标准的插入操作，和父节点用红连接相连
        return new Node(key,val,1,RED);
    }
    int cmp = key.compareTo(h.key);
    if(cmp&lt;0){
        h.left = put(h.left,key,val);
    }else if(cmp&gt;0){
        h.right = put(h.right,key,val);
    }else{
        h.val = val;
    }
    if(isRed(h.right)&amp;&amp;!isRed(h.left)){
        h = rotateLeft(h);
    }
    if(isRed(h.left)&amp;&amp;isRed(h.left.left)){
        h = rotateRight(h);
    }
    if(isRed(h.left)&amp;&amp;isRed(h.right)){
        flipColors(h);
    }
    h.N = size(h.left)+size(h.right)+1;
    return h;
}


//颜色转换
void flipColors(Node h){
    h.color = RED;
    h.left.color = BLACK;
    h.right.color = BLACK;
}

private static final boolean RED = true;
private static final boolean BLACK = false;

private class Node{
    //键
    Key key;
    //相关联的值
    Value val;
    //左右子树
    Node left ,right;
    //这棵子树中的结点总数
    int N;
    //由其父节点指向它的链接的颜色
    boolean color;

    Node(Key key,Value val,int N,boolean color){
        this.key = key;
        this.val = val;
        this.N = N;
        this.color = color;
    }
}

private boolean isRed(Node x){
    if(x==null){
        return false;
    }
    return x.color == RED;
}

//左旋转，把红色右链接转为红色左链接
Node rotateLeft(Node h){
    Node x = h.right;
    h.right = x.left;
    x.left = h;
    x.color = RED;
    x.N = h.N;
    h.N = 1+size(h.left) + size(h.right);
    return x;
}

//右旋转，把红色左链接转为红色右链接
Node rotateRight(Node h){
    Node x = h.left;
    h.left = x.right;
    x.right = h;
    x.color = RED;
    x.N = h.N;
    h.N = 1+size(h.left)+size(h.right);
    return x;
}


```
</code></pre></div></div>


	  ]]></description>
	</item>

	<item>
	  <title>二分查找算法</title>
	  <link>/arithmetic-2.html</link>
	  <author></author>
	  <pubDate>2016-09-15T18:38:00+08:00</pubDate>
	  <guid>/arithmetic-2.html</guid>
	  <description><![CDATA[
	     <p>面试中经常涉及的算法问题
<!--more--></p>

<h2 id="非递归二分查找">非递归二分查找</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```
//非递归二分查找
public static int binSearch(int[] array, int key){
    int mid = 0;
    int start = 0;
    int end = array.length - 1;
    while(start &lt;= end){
        mid = (start + end)/2;
        if (array[mid] == key) {
            return mid;
        }else if (array[mid] &gt; key) {
            end = mid - 1;
        }else{
            start = mid + 1;
        }
    }
    return -1;
}

```
</code></pre></div></div>

<h2 id="递归二分查找">递归二分查找</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```
public static int binSearch(int[] array,int start,int end,int key){
    int mid = (start + end)/2;
    if (array[mid] == key) {
        return mid;
    }
    if (start &gt;= end) {
        return -1;
    }else if (key &gt; array[mid]) {
        return binSearch(array,mid+1,end,key);
    }else{
        return binSearch(array,start,mid-1,key);
    }
    return -1;
}
```
</code></pre></div></div>


	  ]]></description>
	</item>

	<item>
	  <title>排序算法</title>
	  <link>/arithmetic-1.html</link>
	  <author></author>
	  <pubDate>2016-09-11T19:32:00+08:00</pubDate>
	  <guid>/arithmetic-1.html</guid>
	  <description><![CDATA[
	     <p>面试中经常涉及的算法问题
<!--more--></p>

<h2 id="三向切分的快速排序">三向切分的快速排序</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//三向切分的快速排序
public class Quick3Way{
    private static void sort(Comparable[] a,int lo, int hi){
        //调用此方法的公有方法sort()
        if (hi &lt;= lo) {
            return;
        }
        int lt = lo,i = lo+1,gt = hi;
        Comparable v = a[lo];
        while(i &lt;= gt){
            int cmp = a[i].compareTo(V);
            if (cmp &lt; 0) {
                exch(a,lt++,i++);
            }else if (cmp &gt; 0) {
                exch(a,i,gt--);
            }else{i++;}
        }
        //现在a[lo..lt-1]&lt;v=a[lt..gt]&lt;a[gt+1..hi]成立
        sort(a,lo,lt-1);
        sort(a,gt+1,hi);
    }
}

</code></pre></div></div>

<h2 id="快速排序">快速排序</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class Quick{
    public static void sort(Comparable[] a){
        //消除对输入的依赖
        StdRandom.shuffle(a);
        sort(a,0,a.length-1);
    }

    private static void sort(Comparable[] a,int lo,int hi){
        if (hi &lt;= lo) {
            return;
        }
        int j = partition(a,lo,hi);
        //将左半部分a[lo..j-1]排序
        sort(a,lo,j-1);
        //将右半部分a[j+1...hi]排序
        sort(a,j+1,hi);
    }

    private static int partition(Comparable[] a,int lo,int hi){
        //将数组切分为a[lo..i-1],a[i],a[i+1..hi]
        //左右扫描指针
        int i = lo,j=hi+1;
        //切分元素
        Comparable v = a[lo];
        while(true){
            //扫描左右，检查扫描是否结束并交换元素
            while(less(a[++i],v))if (i==hi) {
                break;
            }
            while(less(v,a[--j]))if (j==lo) {
                break;
            }
            exch(a,i,j);
        }
        //将v=a[j]放入到正确的位置
        exch(a,lo,j);
        //a[lo...j-1]&lt;=a[j]&lt;=a[j+1...hi]达成
        return j;
    }
}
</code></pre></div></div>

<h2 id="归并排序-自底向上">归并排序-自底向上</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//自底向上的归并排序
public class MergeBU{
    //归并所需的辅助数组
    private static Comparable[] aux;
    public static void sort(Comparable[] a){
        //进行logN次两两归并
        int N = a.length;
        aux = new Comparable[N];
        //sz子数组的大小
        for (int sz=1; sz&lt;N; sz = sz+sz) {
            //lo子数组的索引
            for (int lo = 0; lo &lt; N-sz; lo+=sz+sz) {
                merge(a,lo,lo+sz-1,Math.min(lo+sz+sz-1,N-1));
            }
        }
    }
}
</code></pre></div></div>

<h2 id="归并排序-自顶向下">归并排序-自顶向下</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//自顶向下的归并排序
public class Merge{
    //归并所需的辅助数组
    private static Comparable[] aux;
    public static void sort(Comparable[] a){
        //一次性分配空间
        aux = new Comparable[a.length];
        sort(a,0,a.length-1);
    }

    private static void sort(Comparable[] a, int lo,int hi){
        //将数组a[lo...hi]排序
        if (hi &lt;= lo) {
            return;
        }
        int mid = (lo + hi)/2;
        //将左半边排序
        sort(a,lo,mid);
        //将右边排序
        sort(a,mid,hi);
        //归并结果
        merge(a,lo,mid,hi);
    }
}
</code></pre></div></div>

<h2 id="原地归并的抽象方法">原地归并的抽象方法</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//原地归并的抽象方法
public static void merge(Comparable[] a,int lo, int mid, int hi){
    //将a[lo...mid]和a[mid+1...hi]归并
    int i = lo;j = mid+1;
    //将a[lo...hi]复制到aux[lo...hi]
    for (int k = lo; k&lt;=hi; k++) {
        aux[k] = a[k];
    }
    //归并回到a[lo...hi]
    for (int k = lo; k&lt;=hi; k++) {
        if (i &gt; mid) {
            //左半边用尽取右边的元素
            a[k] = aux[j++];
        }else if (j &gt; hi) {
            //右边的元素用尽取左边的元素
            a[k] = aux[i++]；
        }else if (less(aux[j],aux[i])) {
            //右半边的当前元素小于左半边的当前元素，取右半边的元素
            a[k] = aux[j++];
        }else{
            //右半边的当前元素大于等于左半边的当前元素，取左半边的元素
            a[k] = aux[i++];
        }
    }
}
</code></pre></div></div>

<h2 id="选择排序">选择排序</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//选择排序
public class Selection{
    public static void sort(Comparable[] a){
        //将a[]按升序排序
        int N = a.length;
        for (int i=0; i&lt;N; i++) {
            //将a[i]和a[i+1..N]中的最小元素交换
            //最小元素的索引
            int min = i;
            for (int j=i+1; i&lt;N; i++) {
                if (less(a[j],a[min])) {
                    min = j;
                }
            }
            exch(a,i,min);
        }
    }
}
</code></pre></div></div>

<h2 id="插入排序">插入排序</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//插入排序,插入排序对于部分有序的数组十分高效，也很适合小规模的数组
public class Insertion{
    public static void sort(Comparable[] a){
        //将a[]按升序排序
        int N = a.length;
        for (int i=1; i&lt;N ; i++) {
            //将a[i]插入到a[i-1],a[i-2],a[i-3]...之中
            for (int j=i; j&gt;0&amp;&amp;less(a[j]&lt;a[j-1]); j--) {
                exch(a,j,j-1);
            }
        }
    }
}
</code></pre></div></div>

<h3 id="排序算法">排序算法</h3>

<p>排序算法可以分为两类：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>除了函数调用所需的栈和固定数目的实例变量之外无需额外内存的原地排序算法
以及需要额外内存空间来存储另一份数组副本的其他排序算法
</code></pre></div></div>

<h2 id="排序类的模板">排序类的模板</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//排序算法类的模板
public class Example{
    public static void sort(Comparable[] a){

    }

    private static boolean less(Comparable v,Comparable w){
        return v.compareTo(w) &lt; 0;
    }

    private static void exch(Comparable[] a,int i, int j){
        Comparable t = a[i];
        a[i] = a[j];
        a[j] = t;
    }

    private static void show(Comparable[] a){
        //在单行中打印数组
        for (int i=0; i&lt; a.length; i++) {
            StdOut.print(a[i] + "");
        }
        StdOut.println();
    }

    public static boolean isSorted(Comparable[] a){
        //测试数组元素是否有序
        for (int i=1; i&lt; a.length; i++) {
            if (less(a[i],a[i-1])) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args){
        //从标准输入读取字符串，将它们排序并输出
        String[] a = In.readStrings();
        sort(a);
        assert isSorted(a);
        show(a);
    }
}

</code></pre></div></div>


	  ]]></description>
	</item>

	<item>
	  <title>MySQL锁表解决方法</title>
	  <link>/mysql-table-lock.html</link>
	  <author></author>
	  <pubDate>2016-08-21T21:32:00+08:00</pubDate>
	  <guid>/mysql-table-lock.html</guid>
	  <description><![CDATA[
	     <p>工作中经常会遇到MySQL数据库锁表的情况，可以用以下方式查询并kill相关的线程
<!--more--></p>

<h2 id="查看正在锁的事务">查看正在锁的事务</h2>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS;
</code></pre></div></div>

<h2 id="查看等待锁的事务">查看等待锁的事务</h2>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS;
</code></pre></div></div>
<h2 id="查询-正在执行的事务">查询 正在执行的事务：</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT * FROM information_schema.INNODB_TRX;
</code></pre></div></div>
<h2 id="查看事务等待状况">查看事务等待状况：</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT
     r.trx_id waiting_trx_id,
     r.trx_mysql_thread_id waiting_thread,
     r.trx_query waiting_query,
     b.trx_id blocking_trx_id,
     b.trx_mysql_thread_id blocking_thread,
     b.trx_query blocking_query
FROM
     information_schema.innodb_lock_waits w
INNER JOIN information_schema.innodb_trx b ON b.trx_id = w.blocking_trx_id
INNER JOIN information_schema.innodb_trx r ON r.trx_id = w.requesting_trx_id;
</code></pre></div></div>

<h2 id="查看更具体的事务等待状况">查看更具体的事务等待状况：</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT
     b.trx_state,
     e.state,
     e.time,
     d.state AS block_state,
     d.time AS block_time,
     a.requesting_trx_id,
     a.requested_lock_id,
     b.trx_query,
     b.trx_mysql_thread_id,
     a.blocking_trx_id,
     a.blocking_lock_id,
     c.trx_query AS block_trx_query,
     c.trx_mysql_thread_id AS block_trx_mysql_tread_id
FROM
     information_schema.INNODB_LOCK_WAITS a
LEFT JOIN information_schema.INNODB_TRX b ON a.requesting_trx_id = b.trx_id
LEFT JOIN information_schema.INNODB_TRX c ON a.blocking_trx_id = c.trx_id
LEFT JOIN information_schema.PROCESSLIST d ON c.trx_mysql_thread_id = d.id
LEFT JOIN information_schema.PROCESSLIST e ON b.trx_mysql_thread_id = e.id
ORDER BY
     a.requesting_trx_id;
</code></pre></div></div>
<h2 id="查看未关闭的事务">查看未关闭的事务：</h2>
<p>–MySQL 5.6</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT
     a.trx_id,
     a.trx_state,
     a.trx_started,
     a.trx_query,
     b.ID,
     b.USER,
     b.DB,
     b.COMMAND,
     b.TIME,
     b.STATE,
     b.INFO,
     c.PROCESSLIST_USER,
     c.PROCESSLIST_HOST,
     c.PROCESSLIST_DB,
     d.SQL_TEXT
FROM
     information_schema.INNODB_TRX a
LEFT JOIN information_schema.PROCESSLIST b ON a.trx_mysql_thread_id = b.id
AND b.COMMAND = 'Sleep'
LEFT JOIN PERFORMANCE_SCHEMA.threads c ON b.id = c.PROCESSLIST_ID
LEFT JOIN PERFORMANCE_SCHEMA.events_statements_current d ON d.THREAD_ID = c.THREAD_ID;
</code></pre></div></div>
<p>–MySQL 5.5</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT
     a.trx_id,
     a.trx_state,
     a.trx_started,
     a.trx_query,
     b.ID,
     b. USER,
     b. HOST,
     b.DB,
     b.COMMAND,
     b.TIME,
     b.STATE,
     b.INFO
FROM
     information_schema.INNODB_TRX a
LEFT JOIN information_schema.PROCESSLIST b ON a.trx_mysql_thread_id = b.id
WHERE
     b.COMMAND = 'Sleep';
</code></pre></div></div>
<h2 id="查看某段时间以来未关闭事务">查看某段时间以来未关闭事务：</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT
        trx_id,
        trx_started,
        trx_mysql_thread_id
FROM
        INFORMATION_SCHEMA.INNODB_TRX
WHERE
        trx_started &lt; date_sub(now(), INTERVAL 1 MINUTE)
AND trx_operation_state IS NULL
AND trx_query IS NULL;
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>负载均衡实现方式</title>
	  <link>/balancing-1.html</link>
	  <author></author>
	  <pubDate>2016-08-21T21:32:00+08:00</pubDate>
	  <guid>/balancing-1.html</guid>
	  <description><![CDATA[
	     <p>分布式必备技能，负载均衡实现方式
<!--more-->
#</p>
<h2 id="一负载均衡的基本概念">一、负载均衡的基本概念</h2>

<p>负载均衡是指，将请求分发到 多台 应用服务器，以此来分散 压力的一种架构方式，他是以集群的方式存在，并且当 某个节点挂掉的时候，可以自动 不再将请求分配到此节点。</p>

<h2 id="二-实现方式">二、 实现方式</h2>

<ol>
  <li>重定向</li>
</ol>

<p>这种方式，是通过将请求全部发送到前置机，由前置机通过算法 得出要分配给那台 应用服务器，然后响应给客户端，由客户端重定向到应用服务器的一种方式。</p>

<p>这种方式，由于每一个的请求，都要重定向一下，所以效率不是很高</p>

<ol>
  <li>反向代理</li>
</ol>

<p>这种方式，是通过在前置机，使用反向代理的方式，将请求分发到应用服务器，客户端无需再请求一次，实现方式通常有两种，一种是用交换机实现，还有一种是用nginx这一类的软件实现</p>

<p>这种方式，由于不需要再次重定向，所以较第一种，效率较高，但是由于请求和响应都是通过前置机来的，所以对前置机的考验很大</p>

<ol>
  <li>数据链路返回</li>
</ol>

<p>这种方式，通过给应用服务器设置虚拟IP，然后通过修改mac地址的方式，将请求分发出去，而应用服务器 收到请求后，可以直接响应给客户端，而不需要经过前置机。</p>

<p>这种方式，由于 前置机 只需要接受请求，不需要响应数据，所以，效率较第二种较高。</p>

<h2 id="三-负载均衡算法">三、 负载均衡算法</h2>

<ol>
  <li>轮询法</li>
</ol>

<p>将请求按顺序轮流地分配到后端服务器上，它均衡地对待后端的每一台服务器，而不关心服务器实际的连接数和当前的系统负载。</p>

<ol>
  <li>随机法</li>
</ol>

<p>通过系统的随机算法，根据后端服务器的列表大小值来随机选取其中的一台服务器进行访问。由概率统计理论可以得知，随着客户端调用服务端的次数增多，</p>

<p>其实际效果越来越接近于平均分配调用量到后端的每一台服务器，也就是轮询的结果。</p>

<ol>
  <li>源地址哈希法</li>
</ol>

<p>源地址哈希的思想是根据获取客户端的IP地址，通过哈希函数计算得到的一个数值，用该数值对服务器列表的大小进行取模运算，得到的结果便是客服端要访问服务器的序号。采用源地址哈希法进行负载均衡，同一IP地址的客户端，当后端服务器列表不变时，它每次都会映射到同一台后端服务器进行访问。</p>

<ol>
  <li>加权轮询法</li>
</ol>

<p>不同的后端服务器可能机器的配置和当前系统的负载并不相同，因此它们的抗压能力也不相同。给配置高、负载低的机器配置更高的权重，让其处理更多的请；而配置低、负载高的机器，给其分配较低的权重，降低其系统负载，加权轮询能很好地处理这一问题，并将请求顺序且按照权重分配到后端。</p>

<ol>
  <li>加权随机法</li>
</ol>

<p>与加权轮询法一样，加权随机法也根据后端机器的配置，系统的负载分配不同的权重。不同的是，它是按照权重随机请求后端服务器，而非顺序。</p>

<ol>
  <li>最小连接数法</li>
</ol>

<p>最小连接数算法比较灵活和智能，由于后端服务器的配置不尽相同，对于请求的处理有快有慢，它是根据后端服务器当前的连接情况，动态地选取其中当前 积压连接数最少的一台服务器来处理当前的请求，尽可能地提高后端服务的利用效率，将负责合理地分流到每一台服务器。</p>

	  ]]></description>
	</item>


</channel>
</rss>
