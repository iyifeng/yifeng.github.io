<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title></title>
   
   <link>http://www.v0ex.com</link>
   <description>不如自己打井，多谈钱，少谈情怀</description>
   <language>zh-Hans</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>java自定义同步工具</title>
	  <link>/java-synchronizer-AQS.html</link>
	  <author></author>
	  <pubDate>2016-11-21T05:35:33+08:00</pubDate>
	  <guid>/java-synchronizer-AQS.html</guid>
	  <description><![CDATA[
	     <p>java并发学习笔记
<!--more--></p>

<h2 id="使用abstractqueuedsynchronizer实现的二元闭锁">使用AbstractQueuedSynchronizer实现的二元闭锁</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class OneShotLatch{
    private final Sync sync = new Sync();
    public void signal(){
        sync.releaseShared(0);
    }
    public void await() throws InterruptedException{
        sync.acquireSharedInterruptibly(0);
    }
    private class Sync extends AbstractQueuedSynchronizer{
        protected int tryAcquireShared(int ignored){
            //如果闭锁是开的(state==1),那么这个操作将成功，否则将失败
            return (getState()==1)?1:-1;
        }
        protected boolean tryReleaseShared(int ignored){
            //现在打开闭锁
            setState(1);
            //现在其他的线程可以获取该闭锁
            return true;
        }
    }
}
</code></pre></div></div>
<h2 id="aqs中获取操作和释放操作的标准形式">AQS中获取操作和释放操作的标准形式</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>boolean acquire() throws InterruptedException{
    while(当前状态不允许获取操作){
        if (需要阻塞获取请求) {
            如果当前线程不在队列中。则将其插入队列
            阻塞当前线程
        }else{
            返回失败
        }
    }
    可能更新同步器的状态
    如果线程位于队列中，则将其移除队列
    返回成功
}
void release(){
    更新同步器的状态
    if (新的状态允许某个被阻塞的线程获取成功) {
        解除队列中一个或多个线程的阻塞状态
    }
}
</code></pre></div></div>
<h2 id="使用lock来实现信号量">使用Lock来实现信号量</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class SemaphoreOnLock{
    private final Lock lock = new ReentrantLock();
    //条件谓词：permitsAvaliable(permits&gt;0)
    private final Condition permitsAvaliable = lock.newCondition();
    private int permits;
    SemaphoreOnLock(int initialPermits){
        lock.lock();
        try{
            permits = initialPermits;
        }finally{
            lock.unlock();
        }
    }
    //阻塞直到permitsAvaliable
    public void acuqire() throws InterruptedException{
        lock.lock();
        try{
            while(permits&lt;=0){
                permitsAvaliable.await();
            }
            --permits;
        }finally{
            lock.unlock();
        }
    }
    public void release(){
        lock.lock();
        try{
            ++permits;
            permitsAvaliable.signal();
        }finally{
            lock.unlock();
        }
    }
}
</code></pre></div></div>
<h2 id="使用显示条件变量的有界缓存">使用显示条件变量的有界缓存</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class ConditionBoundedBuffer&lt;T&gt;{
    protected final Lock lock = new ReentrantLock();
    //条件谓词：notFull(count &lt; item.length)
    private final Condition notFull = lock.newCondition();
    //条件谓词：notEmpty(count&gt;0)
    private final Condition notEmpty = lock.newCondition();
    private final T[] items = (T[])new Object[BUFFER_SIZE];
    private int tail,head,count;
    //阻塞并直到：notFull
    public void put(T x) throws InterruptedException{
        lock.lock();
        try{
            while(count==items.length){
                notFull.await();
            }
            items[tail]=x;
            if (++tail==items.length) {
                tail=0;
            }
            +=count;
            notEmpty.signal()；
        }finally{
            lock.unlock();
        }
    }
    //阻塞并直到：noEmpty
    public T take() throws InterruptedException{
        lock.lock();
        try{
            while(count==0){
                notEmpty.await();
            }
            T x = items[head];
            items[head]=null;
            if (++head==items.length) {
                head=0;
            }
            --count;
            notFull.signal();
            return x;
        }finally{
            lock.unlock();
        }
    }

}
</code></pre></div></div>
<h2 id="使用wait和notifyall来实现可重新关闭的阀门">使用wait和notifyAll来实现可重新关闭的阀门</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class ThreadGate{
    //条件谓词：opened-since(n)(isOpen||generation&gt;n)
    private boolean isOpen;
    private int generation;
    public synchronized void close(){
        isOpen = false;
    }
    public synchronized void open(){
        ++generation;
        isOpen = true;
        notifyAll();
    }
    //阻塞直到：opened-since(generation on empty)
    public synchronized void await() throws InterruptedException{
        int arrivalGeneration = generation;
        while(!isOpen&amp;&amp;arrivalGeneration==generation){
            wait();
        }
    }
}
</code></pre></div></div>

<h2 id="条件等待的标准形式">条件等待的标准形式</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>void stateDependentMethod() throws InterruptedException{
    //必须通过一个锁来保护条件谓词
    synchronized(lock){
        while(!conditionPredicate()){
            lock.wait();
            //现在对象处于合适的状态
        }
    }
}
</code></pre></div></div>
<h2 id="使用条件队列实现的有界缓存">使用条件队列实现的有界缓存</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class BoundedBuffer&lt;V&gt; extends BaseBoundedBuffer&lt;V&gt;{
    //条件谓词：not-full(!isFull())
    //条件谓词：not-empty(!isEmpty())
    public BoundedBuffer(int size){
        super(size);
    }
    //单次通知
    //阻塞并直到:not-full
    public synchronized void put(V v)throws InterruptedException{
        while(isFull()){
            wait();
        }
        doPut(v);
        notifyAll();
    }
    //条件通知
    public synchronized void put(V v)throws InterruptedException{
        while(isFull()){
            wait();
        }
        boolean wasEmpty = isEmpty();
        doPut(v);
        if (wasEmpty) {
            notifyAll();
        }
    }
    //阻塞并直到：not-empty
    public synchronized V take() throws InterruptedException{
        while(isEmpty()){
            wait;
        }
        V v = doTake();
        notifyAll();
        return v;
    }
}
</code></pre></div></div>
<h2 id="有界缓存实现的基类">有界缓存实现的基类</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public abstract class BaseBoundedBuffer&lt;V&gt;{
    private final V[] buf;
    private int tail;
    private int head;
    private int count;
    protected BaseBoundedBuffer(int capacity){
        this.buf = (V[])new Object[capacity];
    }
    protected synchronized final void doPut(V v){
        buf[tail] = v;
        if (++tail == buf.length) {
            tail = 0;
        }
        ++count;
    }
    protected synchronized final V doTake(){
        V v = buf[head];
        buf[head] = null;
        if (++head==buf.length) {
            head = 0;
        }
        --count;
        return v;
    }
    public synchronized final boolean isFull(){
        return count == buf.length;
    }
    public synchronized final boolean isEmpty(){
        return count == 0;
    }
}
</code></pre></div></div>

<h2 id="可阻塞的状态依赖操作的结构">可阻塞的状态依赖操作的结构</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>acuqire lock on object state 
while(precondition does not hold){
    release lock
    wait until precondition might hold
    optionally fail if interrupted or timeout expires
    reacquire lock
}
perform action 
    release lock
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>java编译时与运行时问与答</title>
	  <link>/java-interview-answer-1.html</link>
	  <author></author>
	  <pubDate>2016-11-07T03:40:03+08:00</pubDate>
	  <guid>/java-interview-answer-1.html</guid>
	  <description><![CDATA[
	     <p>java帮你入门-编译时与运行时
<!--more--></p>

<p>转载：https://zhuanlan.zhihu.com/p/22886648</p>

<p>参考：http://java-success.blogspot.com/2011/09/core-java-interview-answers-q1.html</p>

<p>在开发和设计的时候，我们需要考虑编译时，运行时以及构建时这三个概念。理解这几个概念可以更好地帮助你去了解一些基本的原理。下面是初学者晋级中级水平需要知道的一些问题。</p>

<p>Q.下面的代码片段中，行A和行B所标识的代码有什么区别呢？</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class ConstantFolding { 
    static final  int number1 = 5; 
    static final  int number2 = 6; 
    static int number3 = 5; 
    static int number4= 6; 
    public static void main(String[ ] args) { 
          int product1 = number1 * number2;         //line A

          int product2 = number3 * number4;         //line B

    }

}
</code></pre></div></div>

<p>A.在行A的代码中，product的值是在编译期计算的，行B则是在运行时计算的。如果你使用Java反编译器（例如，jd-gui）来反编译ConstantFolding.class文件的话，那么你就会从下面的结果里得到答案。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class ConstantFolding
{  
  static final int number1 = 5;  
  static final int number2 = 6;  
  static int number3 = 5;  
  static int number4 = 6; 

  public static void main(String[ ] args)
  {      
  int product1 = 30;      
  int product2 = number3 * number4;
  }
}
</code></pre></div></div>

<p><strong>常量折叠</strong>是一种Java编译器使用的优化技术。由于final变量的值不会改变，因此就可以对它们优化。Java反编译器和javap命令都是查看编译后的代码（例如，字节码）的利器。</p>

<p>Q.你能想出除了代码优化外，在什么情况下，查看编译过的代码是很有帮助的？</p>

<p>A.<strong>Java里的泛型是在编译时构造的</strong>，可以通过查看编译后的class文件来理解泛型，也可以通过查看它来解决泛型相关的问题。</p>

<p>Q.下面哪些是发生在编译时，运行时，或者两者都有？</p>

<p><strong>方法重载：这个是发生在编译时的</strong>。方法重载也被称为<strong>编译时多态</strong>，因为编译器可以根据参数的类型来选择使用哪个方法。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class {
     public static void evaluate(String param1);  // method #1
     public static void evaluate(int param1);   // method #2}
</code></pre></div></div>

<p>如果编译器要编译下面的语句的话：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>evaluate(“My Test Argument passed to param1”);
</code></pre></div></div>

<p>它会根据传入的参数是字符串常量，生成调用#1方法的字节码</p>

<p><strong>方法覆盖：这个是在运行时发生的</strong>。方法重载被称为<strong>运行时多态</strong>，因为在编译期编译器不知道并且没法知道该去调用哪个方法。JVM会在代码运行的时候做出决定。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class A {
   public int compute(int input) {          //method #3
        return 3 * input;
   }        
} 

public class B extends A {
   @Override
   public int compute(int input) {          //method #4
        return 4 * input;
   }        
}
</code></pre></div></div>

<p>子类B中的compute(..)方法重写了父类的compute(..)方法。如果编译器遇到下面的代码：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public int evaluate(A reference, int arg2)  {
     int result = reference.compute(arg2);
}
</code></pre></div></div>

<p>编译器是没法知道传入的参数reference的类型是A还是B。因此，只能够在运行时，根据赋给输入变量“reference”的对象的类型（例如，A或者B的实例）来决定调用方法#3还是方法#4.</p>

<p><strong>泛型（又称类型检验）：这个是发生在编译期的</strong>。编译器负责检查程序中类型的正确性，然后把使用了泛型的代码翻译或者重写成可以执行在当前JVM上的非泛型代码。这个技术被称为“<strong>类型擦除</strong>“。换句话来说，编译器会擦除所有在尖括号里的类型信息，来保证和版本1.4.0或者更早版本的JRE的兼容性。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>List&lt;String&gt; myList = new ArrayList&lt;String&gt;(10);
</code></pre></div></div>

<p>编译后成为了：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>List myList = new ArrayList(10);
</code></pre></div></div>

<p>注解（Annotation）：你可以使用运行时或者编译时的注解。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class B extends A {
   @Override
    public int compute(int input){      //method #4
        return 4 * input;
    }       
}
</code></pre></div></div>

<p><strong>@Override是一个简单的编译时注解</strong>，它可以用来捕获类似于在子类中把toString()写成tostring()这样的错误。在Java 5中，用户自定义的注解可以用注解处理工具(Anotation Process Tool ——APT)在编译时进行处理。到了Java 6，这个功能已经是编译器的一部分了。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class MyTest{
    @Test
     public void testEmptyness( ){
         org.junit.Assert.assertTrue(getList( ).isEmpty( ));
     } 
     private List getList( ){
             //implemenation goes here
     }
}
</code></pre></div></div>

<p>@Test是JUnit框架用来在<strong>运行时通过反射</strong>来决定调用测试类的哪个（些）方法的注解。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Test (timeout=100)
public void testTimeout( ) {
    while(true);   //infinite loop
}
</code></pre></div></div>

<p>如果运行时间超过100ms的话，上面的测试用例就会失败。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Test (expected=IndexOutOfBoundsException.class)
public void testOutOfBounds( ) {
       new ArrayList&lt;Object&gt;( ).get(1);
}
</code></pre></div></div>

<p>如果上面的代码在运行时没有抛出IndexOutOfBoundsException或者抛出的是其他的异常的话，那么这个用例就会失败。<strong>用户自定义的注解可以在运行时通过Java反射API里新增的AnnotatedElement和”Annotation”元素接口来处理</strong>。</p>

<p><strong>异常（Exception）</strong>：你可以使用运行时异常或者编译时异常。</p>

<p><strong>运行时异常（RuntimeException）也称作未检测的异常（unchecked exception）</strong>，这表示这种异常不需要编译器来检测。RuntimeException是所有可以在运行时抛出的异常的父类。一个方法除要捕获异常外，如果它执行的时候可能会抛出RuntimeException的子类，那么它就不需要用throw语句来声明抛出的异常。</p>

<p>例如：NullPointerException，ArrayIndexOutOfBoundsException，等等</p>

<p><strong>受检查异常（checked exception）都是编译器在编译时进行校验的</strong>，通过throws语句或者try{}cathch{} 语句块来处理检测异常。编译器会分析哪些异常会在执行一个方法或者构造函数的时候抛出。</p>

<p>面向切面的编程（Aspect Oriented Programming-AOP）：<strong>切面可以在编译时，运行时或，加载时或者运行时织入</strong>。</p>

<p>1.编译期：编译期织入是最简单的方式。如果你拥有应用的代码，你可以使用AOP编译器（例如，ajc – AspectJ编译器）对源码进行编译，然后输出织入完成的class文件。AOP编译的过程包含了waver的调用。切面的形式可以是源码的形式也可以是二进制的形式。如果切面需要针对受影响的类进行编译，那么你就需要在编译期织入了。</p>

<p>2.编译后：这种方式有时候也被称为二进制织入，它被用来织入已有的class文件和jar文件。和编译时织入方式相同，用来织入的切面可以是源码也可以是二进制的形式，并且它们自己也可以被织入切面。</p>

<p>3.装载期：这种织入是一种二进制织入，它被延迟到JVM加载class文件和定义类的时候。为了支持这种织入方式，需要显式地由运行时环境或者通过一种“织入代理（weaving agent）“来提供一个或者多个“织入类加载器（weaving class loader）”。</p>

<p>4.运行时：对已经加载到JVM里的类进行织入</p>

<p><strong>继承 – 发生在编译时，因为它是静态的</strong></p>

<p><strong>代理或者组合 – 发生在运行时，因为它更加具有动态性和灵活性</strong>。</p>

<p>Q.你有没有听说过“组合优于继承”这样的说法呢？如果听说过的话，那么你是怎么理解的呢？</p>

<p>A.<strong>继承是一种多态工具，而不是一种代码复用工具</strong>。有些开发者喜欢用继承的方式来实现代码复用，即使是在没有多态关系的情况下。是否使用继承的规则是继承只能用在类之间有“父子”关系的情况下。</p>

<p>1.不要仅仅为了代码复用而继承。当你使用组合来实现代码复用的时候，是不会产生继承关系的。过度使用继承（通过“extends”关键字）的话，如果修改了父类，会损坏所有的子类。这是因为子类和父类的紧耦合关系是在编译期产生的。</p>

<p>2.不要仅仅为了多态而继承。如果你的类之间没有继承关系，并且你想要实现多态，那么你可以通过接口和组合的方式来实现，这样不仅可以实现代码重用，同时也可以实现运行时的灵活性。</p>

<p>这就是为什么（Gang of Four）的设计模式里更倾向于使用组合而不是继承的原因。<strong>面试者</strong>会在你的答案里着重关注这几个词语——<strong>“耦合”</strong>，<strong>“静态还是动态”</strong>，以及<strong>“发生在编译期还是运行时”</strong>。运行时的灵活性可以通过组合来实现，因为类可以在运行时动态地根据一个结果有条件或者无条件地进行组合。但是继承却是静态的。</p>

<p>Q.<strong>你能够通过实例来区别编译期继承和运行时继承</strong>，以及指出Java支持哪种吗？</p>

<p>A.“继承”表示动作和属性从一个对象传递到另外一个对象的场景。<strong>Java语言本身只支持编译期继承</strong>，它是通过“extends”关键字来产生子类的方式实现的，如下所示：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class Parent {
    public String saySomething( ) {
              return “Parent is called”;
    }
} 

public class Child extends Parent {
     @Override
     public String saySomething( ) {
               return super.saySomething( ) +  “, Child is called”;
    }
}
</code></pre></div></div>

<p>“Child”类的saySomething()方法的调用会返回“Parent is called，Child is Called”，因为，子类的调用继承了父类的“Parenet is called”。关键字“super”是用来调用“Parent”类的方法。运行时继承表示在运行时构建父/子类关系。<strong>Java语言本身不支持运行时继承，但是有一种替代的方案叫做“代理”或者“组合”</strong>，它表示在运行时组件一个层次对象的子类。这样可以模拟运行时继承的实现。在Java里，<strong>代理的典型实现</strong>方式如下：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class Parent {
    public String saySomething( ) {
              return “Parent is called”;
    }
} 

public class Child  {
     public String saySomething( ) {
               return new Parent( ).saySomething( ) +  “, Child is called”;
    }
}
</code></pre></div></div>

<p>子类代理了父类的调用。<strong>组合</strong>可以按照下面的方式来实现：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class Child  {
     private Parent parent = null; 

     public Child( ){
               this.parent = new Parent( );
     } 

     public String saySomething( ) {
               return this.parent.saySomething( ) +  “, Child is called”;
    }
}
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>二分查找算法</title>
	  <link>/arithmetic-2.html</link>
	  <author></author>
	  <pubDate>2016-09-15T18:38:00+08:00</pubDate>
	  <guid>/arithmetic-2.html</guid>
	  <description><![CDATA[
	     <p>面试中经常涉及的算法问题
<!--more--></p>

<h2 id="非递归二分查找">非递归二分查找</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```
//非递归二分查找
public static int binSearch(int[] array, int key){
    int mid = 0;
    int start = 0;
    int end = array.length - 1;
    while(start &lt;= end){
        mid = (start + end)/2;
        if (array[mid] == key) {
            return mid;
        }else if (array[mid] &gt; key) {
            end = mid - 1;
        }else{
            start = mid + 1;
        }
    }
    return -1;
}

```
</code></pre></div></div>

<h2 id="递归二分查找">递归二分查找</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```
public static int binSearch(int[] array,int start,int end,int key){
    int mid = (start + end)/2;
    if (array[mid] == key) {
        return mid;
    }
    if (start &gt;= end) {
        return -1;
    }else if (key &gt; array[mid]) {
        return binSearch(array,mid+1,end,key);
    }else{
        return binSearch(array,start,mid-1,key);
    }
    return -1;
}
```
</code></pre></div></div>


	  ]]></description>
	</item>

	<item>
	  <title>排序算法</title>
	  <link>/arithmetic-1.html</link>
	  <author></author>
	  <pubDate>2016-09-11T19:32:00+08:00</pubDate>
	  <guid>/arithmetic-1.html</guid>
	  <description><![CDATA[
	     <p>面试中经常涉及的算法问题
<!--more--></p>

<h2 id="三向切分的快速排序">三向切分的快速排序</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//三向切分的快速排序
public class Quick3Way{
    private static void sort(Comparable[] a,int lo, int hi){
        //调用此方法的公有方法sort()
        if (hi &lt;= lo) {
            return;
        }
        int lt = lo,i = lo+1,gt = hi;
        Comparable v = a[lo];
        while(i &lt;= gt){
            int cmp = a[i].compareTo(V);
            if (cmp &lt; 0) {
                exch(a,lt++,i++);
            }else if (cmp &gt; 0) {
                exch(a,i,gt--);
            }else{i++;}
        }
        //现在a[lo..lt-1]&lt;v=a[lt..gt]&lt;a[gt+1..hi]成立
        sort(a,lo,lt-1);
        sort(a,gt+1,hi);
    }
}

</code></pre></div></div>

<h2 id="快速排序">快速排序</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class Quick{
    public static void sort(Comparable[] a){
        //消除对输入的依赖
        StdRandom.shuffle(a);
        sort(a,0,a.length-1);
    }

    private static void sort(Comparable[] a,int lo,int hi){
        if (hi &lt;= lo) {
            return;
        }
        int j = partition(a,lo,hi);
        //将左半部分a[lo..j-1]排序
        sort(a,lo,j-1);
        //将右半部分a[j+1...hi]排序
        sort(a,j+1,hi);
    }

    private static int partition(Comparable[] a,int lo,int hi){
        //将数组切分为a[lo..i-1],a[i],a[i+1..hi]
        //左右扫描指针
        int i = lo,j=hi+1;
        //切分元素
        Comparable v = a[lo];
        while(true){
            //扫描左右，检查扫描是否结束并交换元素
            while(less(a[++i],v))if (i==hi) {
                break;
            }
            while(less(v,a[--j]))if (j==lo) {
                break;
            }
            exch(a,i,j);
        }
        //将v=a[j]放入到正确的位置
        exch(a,lo,j);
        //a[lo...j-1]&lt;=a[j]&lt;=a[j+1...hi]达成
        return j;
    }
}
</code></pre></div></div>

<h2 id="归并排序-自底向上">归并排序-自底向上</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//自底向上的归并排序
public class MergeBU{
    //归并所需的辅助数组
    private static Comparable[] aux;
    public static void sort(Comparable[] a){
        //进行logN次两两归并
        int N = a.length;
        aux = new Comparable[N];
        //sz子数组的大小
        for (int sz=1; sz&lt;N; sz = sz+sz) {
            //lo子数组的索引
            for (int lo = 0; lo &lt; N-sz; lo+=sz+sz) {
                merge(a,lo,lo+sz-1,Math.min(lo+sz+sz-1,N-1));
            }
        }
    }
}
</code></pre></div></div>

<h2 id="归并排序-自顶向下">归并排序-自顶向下</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//自顶向下的归并排序
public class Merge{
    //归并所需的辅助数组
    private static Comparable[] aux;
    public static void sort(Comparable[] a){
        //一次性分配空间
        aux = new Comparable[a.length];
        sort(a,0,a.length-1);
    }

    private static void sort(Comparable[] a, int lo,int hi){
        //将数组a[lo...hi]排序
        if (hi &lt;= lo) {
            return;
        }
        int mid = (lo + hi)/2;
        //将左半边排序
        sort(a,lo,mid);
        //将右边排序
        sort(a,mid,hi);
        //归并结果
        merge(a,lo,mid,hi);
    }
}
</code></pre></div></div>

<h2 id="原地归并的抽象方法">原地归并的抽象方法</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//原地归并的抽象方法
public static void merge(Comparable[] a,int lo, int mid, int hi){
    //将a[lo...mid]和a[mid+1...hi]归并
    int i = lo;j = mid+1;
    //将a[lo...hi]复制到aux[lo...hi]
    for (int k = lo; k&lt;=hi; k++) {
        aux[k] = a[k];
    }
    //归并回到a[lo...hi]
    for (int k = lo; k&lt;=hi; k++) {
        if (i &gt; mid) {
            //左半边用尽取右边的元素
            a[k] = aux[j++];
        }else if (j &gt; hi) {
            //右边的元素用尽取左边的元素
            a[k] = aux[i++]；
        }else if (less(aux[j],aux[i])) {
            //右半边的当前元素小于左半边的当前元素，取右半边的元素
            a[k] = aux[j++];
        }else{
            //右半边的当前元素大于等于左半边的当前元素，取左半边的元素
            a[k] = aux[i++];
        }
    }
}
</code></pre></div></div>

<h2 id="选择排序">选择排序</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//选择排序
public class Selection{
    public static void sort(Comparable[] a){
        //将a[]按升序排序
        int N = a.length;
        for (int i=0; i&lt;N; i++) {
            //将a[i]和a[i+1..N]中的最小元素交换
            //最小元素的索引
            int min = i;
            for (int j=i+1; i&lt;N; i++) {
                if (less(a[j],a[min])) {
                    min = j;
                }
            }
            exch(a,i,min);
        }
    }
}
</code></pre></div></div>

<h2 id="插入排序">插入排序</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//插入排序,插入排序对于部分有序的数组十分高效，也很适合小规模的数组
public class Insertion{
    public static void sort(Comparable[] a){
        //将a[]按升序排序
        int N = a.length;
        for (int i=1; i&lt;N ; i++) {
            //将a[i]插入到a[i-1],a[i-2],a[i-3]...之中
            for (int j=i; j&gt;0&amp;&amp;less(a[j]&lt;a[j-1]); j--) {
                exch(a,j,j-1);
            }
        }
    }
}
</code></pre></div></div>

<h3 id="排序算法">排序算法</h3>

<p>排序算法可以分为两类：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>除了函数调用所需的栈和固定数目的实例变量之外无需额外内存的原地排序算法
以及需要额外内存空间来存储另一份数组副本的其他排序算法
</code></pre></div></div>

<h2 id="排序类的模板">排序类的模板</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//排序算法类的模板
public class Example{
    public static void sort(Comparable[] a){

    }

    private static boolean less(Comparable v,Comparable w){
        return v.compareTo(w) &lt; 0;
    }

    private static void exch(Comparable[] a,int i, int j){
        Comparable t = a[i];
        a[i] = a[j];
        a[j] = t;
    }

    private static void show(Comparable[] a){
        //在单行中打印数组
        for (int i=0; i&lt; a.length; i++) {
            StdOut.print(a[i] + "");
        }
        StdOut.println();
    }

    public static boolean isSorted(Comparable[] a){
        //测试数组元素是否有序
        for (int i=1; i&lt; a.length; i++) {
            if (less(a[i],a[i-1])) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args){
        //从标准输入读取字符串，将它们排序并输出
        String[] a = In.readStrings();
        sort(a);
        assert isSorted(a);
        show(a);
    }
}

</code></pre></div></div>


	  ]]></description>
	</item>

	<item>
	  <title>MySQL锁表解决方法</title>
	  <link>/mysql-table-lock.html</link>
	  <author></author>
	  <pubDate>2016-08-21T21:32:00+08:00</pubDate>
	  <guid>/mysql-table-lock.html</guid>
	  <description><![CDATA[
	     <p>工作中经常会遇到MySQL数据库锁表的情况，可以用以下方式查询并kill相关的线程
<!--more--></p>

<h2 id="查看正在锁的事务">查看正在锁的事务</h2>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS;
</code></pre></div></div>

<h2 id="查看等待锁的事务">查看等待锁的事务</h2>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS;
</code></pre></div></div>
<h2 id="查询-正在执行的事务">查询 正在执行的事务：</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT * FROM information_schema.INNODB_TRX;
</code></pre></div></div>
<h2 id="查看事务等待状况">查看事务等待状况：</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT
     r.trx_id waiting_trx_id,
     r.trx_mysql_thread_id waiting_thread,
     r.trx_query waiting_query,
     b.trx_id blocking_trx_id,
     b.trx_mysql_thread_id blocking_thread,
     b.trx_query blocking_query
FROM
     information_schema.innodb_lock_waits w
INNER JOIN information_schema.innodb_trx b ON b.trx_id = w.blocking_trx_id
INNER JOIN information_schema.innodb_trx r ON r.trx_id = w.requesting_trx_id;
</code></pre></div></div>

<h2 id="查看更具体的事务等待状况">查看更具体的事务等待状况：</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT
     b.trx_state,
     e.state,
     e.time,
     d.state AS block_state,
     d.time AS block_time,
     a.requesting_trx_id,
     a.requested_lock_id,
     b.trx_query,
     b.trx_mysql_thread_id,
     a.blocking_trx_id,
     a.blocking_lock_id,
     c.trx_query AS block_trx_query,
     c.trx_mysql_thread_id AS block_trx_mysql_tread_id
FROM
     information_schema.INNODB_LOCK_WAITS a
LEFT JOIN information_schema.INNODB_TRX b ON a.requesting_trx_id = b.trx_id
LEFT JOIN information_schema.INNODB_TRX c ON a.blocking_trx_id = c.trx_id
LEFT JOIN information_schema.PROCESSLIST d ON c.trx_mysql_thread_id = d.id
LEFT JOIN information_schema.PROCESSLIST e ON b.trx_mysql_thread_id = e.id
ORDER BY
     a.requesting_trx_id;
</code></pre></div></div>
<h2 id="查看未关闭的事务">查看未关闭的事务：</h2>
<p>–MySQL 5.6</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT
     a.trx_id,
     a.trx_state,
     a.trx_started,
     a.trx_query,
     b.ID,
     b.USER,
     b.DB,
     b.COMMAND,
     b.TIME,
     b.STATE,
     b.INFO,
     c.PROCESSLIST_USER,
     c.PROCESSLIST_HOST,
     c.PROCESSLIST_DB,
     d.SQL_TEXT
FROM
     information_schema.INNODB_TRX a
LEFT JOIN information_schema.PROCESSLIST b ON a.trx_mysql_thread_id = b.id
AND b.COMMAND = 'Sleep'
LEFT JOIN PERFORMANCE_SCHEMA.threads c ON b.id = c.PROCESSLIST_ID
LEFT JOIN PERFORMANCE_SCHEMA.events_statements_current d ON d.THREAD_ID = c.THREAD_ID;
</code></pre></div></div>
<p>–MySQL 5.5</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT
     a.trx_id,
     a.trx_state,
     a.trx_started,
     a.trx_query,
     b.ID,
     b. USER,
     b. HOST,
     b.DB,
     b.COMMAND,
     b.TIME,
     b.STATE,
     b.INFO
FROM
     information_schema.INNODB_TRX a
LEFT JOIN information_schema.PROCESSLIST b ON a.trx_mysql_thread_id = b.id
WHERE
     b.COMMAND = 'Sleep';
</code></pre></div></div>
<h2 id="查看某段时间以来未关闭事务">查看某段时间以来未关闭事务：</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT
        trx_id,
        trx_started,
        trx_mysql_thread_id
FROM
        INFORMATION_SCHEMA.INNODB_TRX
WHERE
        trx_started &lt; date_sub(now(), INTERVAL 1 MINUTE)
AND trx_operation_state IS NULL
AND trx_query IS NULL;
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>负载均衡实现方式</title>
	  <link>/balancing-1.html</link>
	  <author></author>
	  <pubDate>2016-08-21T21:32:00+08:00</pubDate>
	  <guid>/balancing-1.html</guid>
	  <description><![CDATA[
	     <p>分布式必备技能，负载均衡实现方式
<!--more-->
#</p>
<h2 id="一负载均衡的基本概念">一、负载均衡的基本概念</h2>

<p>负载均衡是指，将请求分发到 多台 应用服务器，以此来分散 压力的一种架构方式，他是以集群的方式存在，并且当 某个节点挂掉的时候，可以自动 不再将请求分配到此节点。</p>

<h2 id="二-实现方式">二、 实现方式</h2>

<ol>
  <li>重定向</li>
</ol>

<p>这种方式，是通过将请求全部发送到前置机，由前置机通过算法 得出要分配给那台 应用服务器，然后响应给客户端，由客户端重定向到应用服务器的一种方式。</p>

<p>这种方式，由于每一个的请求，都要重定向一下，所以效率不是很高</p>

<ol>
  <li>反向代理</li>
</ol>

<p>这种方式，是通过在前置机，使用反向代理的方式，将请求分发到应用服务器，客户端无需再请求一次，实现方式通常有两种，一种是用交换机实现，还有一种是用nginx这一类的软件实现</p>

<p>这种方式，由于不需要再次重定向，所以较第一种，效率较高，但是由于请求和响应都是通过前置机来的，所以对前置机的考验很大</p>

<ol>
  <li>数据链路返回</li>
</ol>

<p>这种方式，通过给应用服务器设置虚拟IP，然后通过修改mac地址的方式，将请求分发出去，而应用服务器 收到请求后，可以直接响应给客户端，而不需要经过前置机。</p>

<p>这种方式，由于 前置机 只需要接受请求，不需要响应数据，所以，效率较第二种较高。</p>

<h2 id="三-负载均衡算法">三、 负载均衡算法</h2>

<ol>
  <li>轮询法</li>
</ol>

<p>将请求按顺序轮流地分配到后端服务器上，它均衡地对待后端的每一台服务器，而不关心服务器实际的连接数和当前的系统负载。</p>

<ol>
  <li>随机法</li>
</ol>

<p>通过系统的随机算法，根据后端服务器的列表大小值来随机选取其中的一台服务器进行访问。由概率统计理论可以得知，随着客户端调用服务端的次数增多，</p>

<p>其实际效果越来越接近于平均分配调用量到后端的每一台服务器，也就是轮询的结果。</p>

<ol>
  <li>源地址哈希法</li>
</ol>

<p>源地址哈希的思想是根据获取客户端的IP地址，通过哈希函数计算得到的一个数值，用该数值对服务器列表的大小进行取模运算，得到的结果便是客服端要访问服务器的序号。采用源地址哈希法进行负载均衡，同一IP地址的客户端，当后端服务器列表不变时，它每次都会映射到同一台后端服务器进行访问。</p>

<ol>
  <li>加权轮询法</li>
</ol>

<p>不同的后端服务器可能机器的配置和当前系统的负载并不相同，因此它们的抗压能力也不相同。给配置高、负载低的机器配置更高的权重，让其处理更多的请；而配置低、负载高的机器，给其分配较低的权重，降低其系统负载，加权轮询能很好地处理这一问题，并将请求顺序且按照权重分配到后端。</p>

<ol>
  <li>加权随机法</li>
</ol>

<p>与加权轮询法一样，加权随机法也根据后端机器的配置，系统的负载分配不同的权重。不同的是，它是按照权重随机请求后端服务器，而非顺序。</p>

<ol>
  <li>最小连接数法</li>
</ol>

<p>最小连接数算法比较灵活和智能，由于后端服务器的配置不尽相同，对于请求的处理有快有慢，它是根据后端服务器当前的连接情况，动态地选取其中当前 积压连接数最少的一台服务器来处理当前的请求，尽可能地提高后端服务的利用效率，将负责合理地分流到每一台服务器。</p>

	  ]]></description>
	</item>

	<item>
	  <title>设计模式-单例模式</title>
	  <link>/design-singleton.html</link>
	  <author></author>
	  <pubDate>2016-06-21T19:18:00+08:00</pubDate>
	  <guid>/design-singleton.html</guid>
	  <description><![CDATA[
	     <p>设计模式之单例模式，最简单，最暴力，也最贱
<!--more-->
#</p>
<h3 id="创建型模式-单例模式">创建型模式-单例模式</h3>

<p>为实现类的唯一性，我们需要通过如下三个步骤对该类进行重构：</p>

<ol>
  <li>
    <p>为了确保实例的唯一性，我们需要禁止类的外部直接使用new来创建对象，因此需要将类的构造函数的可见性改为private，如下所示：</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>private Singleton(){}
</code></pre></div>    </div>
  </li>
  <li>
    <p>虽然类的外部无法使用new来创建对象，但是在Singleton的内部还是可以创建的，可见性只对类外有效。因此，我们可以在Singleton中创建并保存这个唯一实例。为了让外界可以访问这个唯一实例，需要在Singleton中定义一个静态的Singleton类型的私有成员变量，如下所示：</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>private static Singleton singleton = null;
</code></pre></div>    </div>
  </li>
  <li>
    <p>为了保证成员变量的封装性，我们将Singleton类型的singleton对象的可见性设置为private，但是外界该如何使用该成员变量并何时实例化该成员变量呢？那就是增加一个公有的静态方法，如下所示</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public static Singleton getInstance(){
    if(null == singleton){
        singleton = new Singleton();
    }
    return singleton;
}
</code></pre></div>    </div>
  </li>
</ol>

<p>单例模式有三个要点：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。</p>

<p>上述单例模式在多线程下也会出现获取实例不相同的情况，究其原因，当第一次调用getInstance()方法时，，金探测对象为null，因此系统将执行代码instance = new Singleton()，在此过程中，由于要对Singleton进行大量初始化工作，需要一段使劲来创建Singleton对象。而在此时，如果再一次调用getinstance()方法，由于instance尚未创建成功，仍为null，因此instance = new Singelton()将再次执行，导致最终创建了多个instance对象。</p>

<p>有两种方案可以解决上述问题，饿汉模式和懒汉模式</p>

<p><strong>饿汉模式</strong>直接上代码：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>饿汉模式
class Singleton{
    private static final Singleton instance = new Singleton();
    private Singleton(){}
    public static Singleton getInstance(){
        return intance;
    }
}
</code></pre></div></div>

<p>多线程模式下，饿汉模式不会出现创建多个单例对象的情况，可以确保单例对象的唯一性。</p>

<p><strong>懒汉模式</strong>直接上代码：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Singleton{
    private static Singleton instance = null;
    private Singleton(){}
    public static Singleton getInstance(){
        if(null == instance){
            synchronized(Singleton.class){
                instance = new Singleton();
            }
        }
        return instance;
    }
}
</code></pre></div></div>

<p>多线程情况下，上述懒汉模式还是会出现单例对象不唯一的情况，加入线程A进入synchronized锁定代码，线程B处于排队等待状态。但是当A执行完毕时，线程B并不知道实例已经创建，线程B继续创建实例，会导致产生多个单例对象。进一步改进，在synchronized中再进行一次判断，这种方式称为双重检查锁定(Double-Check Locking)。代码如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Singleton{
    private volatile static Singleton instance = null;
    private Singleton(){}
    public static Singleton getInstance(){
        if(null == instance){
            synchronized(Singleton.class){
                if(null == instance){
                    instance = new Singleton();
                }
            }
        }
        return instance;
    }
}
</code></pre></div></div>

<p>需要注意的是，如果使用双重检查锁定来实现懒汉模式，需要在静态成员变量instance之前增加修饰符volatile，被volatile修饰的成员变量可以确保多个线程都能够正确处理。由于volatile关键字会屏蔽Java虚拟机所做的一些代码优化，可能会导致系统运行效率降低。</p>

<p>可以从资源利用效率和资源初始化耗时两方面比较饿汉模式和懒汉模式的优劣。</p>

<p>有没有一种方式，可以克服两种模式的缺点呢，是的，有！</p>

<p>Initialization Demand Holder（IoDH），在IoDH中，我们在单例类中增加一个静态（static）内部类，在该类内部创建单例对象，再将该单例对象通过getInstance()方法返回给外部使用，代码如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Singleton{
    private Singleton(){}
    private static class HolderClass{
        private final static Singleton instance = new Singleton();
    }
    public static Singleton getInstance(){
        return HolderClass.instance;
    }
}
</code></pre></div></div>

<p>通过使用IoDH，既可以实现延迟加载，又可以保证线程安全，不影响系统性能，不失为一种好的单例模式实现方式，其缺点是与编程语言本身的特性相关，很多面向对象的语言不支持IoDH。</p>

	  ]]></description>
	</item>

	<item>
	  <title>Spring 传播机制实战</title>
	  <link>/spring-propagation.html</link>
	  <author></author>
	  <pubDate>2015-09-27T18:18:00+08:00</pubDate>
	  <guid>/spring-propagation.html</guid>
	  <description><![CDATA[
	     <p>Spring事务传播机制，敲一遍代码就记住了
<!--more--></p>
<h2 id="spring-传播机制实战">Spring 传播机制实战</h2>

<h3 id="场景佩奇要给乔治转账">场景：佩奇要给乔治转账</h3>

<ol>
  <li>基础操作：扣钱和加钱</li>
</ol>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	/**
     * 取款操作
     * @param name 用户
     * @param usd 钱
     */
	void withdrawal(String name, BigDecimal usd);
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	/**
     * 存款操作
     * @param name 用户
     * @param usd 钱
     */
    void deposit(String name, BigDecimal usd);
</code></pre></div></div>

<ol>
  <li>业务操作：转账，pappe给george转账10000块</li>
</ol>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	/**
     * 转账服务
     * @param oName 从该用户扣钱
     * @param dName 向该用户加钱
     */
    void transfer(String oName, String dName){
        balanceService.withdrawal(oName,new BigDecimal(10000));
        balanceService.deposit(dName,new BigDecimal(10000));
    }
</code></pre></div></div>

<h2 id="传播机制7兄弟">传播机制7兄弟</h2>

<p>1.propagation_required</p>

<p>Spring默认的事务传播机制，如果外层有事务则该事物加入外层事务，一起提交或回滚，如果没有事务则当前开启一个新事物，该机制满足大多数业务场景。</p>

<p>transfer、withdrawal、deposit传播机制都设置为<strong>propagation_required</strong>，任何一个方法抛异常，整个事务都会回滚。</p>

<p>2.propagation_required_new</p>

<p>其含义是当前方法每次新开启一个事务，如果存在外层事务的话，就把外层事务挂起。没有外层事务的话，没有就没有呗</p>

<ol>
  <li>
    <p>propagation_never</p>

    <p>该传播机制不支持事务，其含义是如果存在外层事务，则抛出异常</p>

    <p>transfer设置为required，withdrawal和deposit的任何一个传播机制设置为<strong>propagation_never</strong>，整个事务会抛出异常Existing transaction found for transaction marked with propagation ‘never’</p>
  </li>
  <li>
    <p>propagation_mandatory</p>

    <p>其含义是必须要存在外层事务，如果没有的话就会抛异常Existing transaction found for transaction marked with propagation ‘mandatory’</p>
  </li>
  <li>
    <p>propagation_support</p>

    <p>其含义是如果存在外层事务，则加入该事务，不存在的话就按照普通方法执行</p>

    <p>transfer设置为required，withdrawal和deposit的传播机制都设置为<strong>propagation_support</strong>,withdrawal和deposit的任何一个方法抛异常，整个事务都会回滚。</p>

    <p>transfer不设置任何事务，withdrawal执行成功，deposit因为异常执行失败，那么佩奇扣钱成功了，但是乔治加钱的操作失败了，10000块就这么不翼而飞了</p>
  </li>
  <li>
    <p>propagation_not_support</p>

    <p>其含义是不支持事务，如果存在外层事务的话就挂起，没有的话，没有就没有。</p>

    <p>该传播机制与<strong>普通方法的区别</strong></p>
    <ul>
      <li>如果transfer设置为required，withdrawal和deposit的传播机制都设置为<strong>propagation_not_support</strong>,withdrawal执行成功，deposit因为异常执行失败，那么佩奇扣钱成功了，但是乔治加钱的操作失败了，10000块就这么不翼而飞了</li>
      <li>如果transfer设置为required, withdrawal和deposit只是普通方法，没有配置事务，如果withdrawal执行成功，deposit因为异常执行失败，那么transfer事务会回滚，佩奇的扣钱的操作回回滚，10000块钱还在。</li>
    </ul>
  </li>
  <li>
    <p>propagation_nested</p>

    <p>其含义是嵌套事务，所谓嵌套，外部事务是父事务，当前方法所属的事务是子事务，子事务如果因为异常回滚，回回滚到savepoint，父事务可以选择回滚或者不会滚。但如果父事务回滚，那么子事务一定会回滚</p>
  </li>
</ol>

<h2 id="动起手不要抖敲着键盘跟着走">动起手，不要抖，敲着键盘，跟着走</h2>

<ol>
  <li>Mysql建表transaction_user,然后初始化数据,测试用例里有</li>
  <li>按照自己的喜好随意配置transfer、withdrawal和deposit的传播机制</li>
  <li>测试用例测试每个传播机制的用法，随时观察transaction_user中的钱的走向</li>
</ol>

<h2 id="源码">源码</h2>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://github.com/bugcodes/transaction-practice.git
</code></pre></div></div>

	  ]]></description>
	</item>


</channel>
</rss>
