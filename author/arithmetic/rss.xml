<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title></title>
   
   <link>http://www.v0ex.com</link>
   <description>不如自己打井，多谈钱，少谈情怀</description>
   <language>zh-Hans</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>分治策略模板</title>
	  <link>/arithmetic-3.html</link>
	  <author></author>
	  <pubDate>2016-09-18T04:18:46+08:00</pubDate>
	  <guid>/arithmetic-3.html</guid>
	  <description><![CDATA[
	     <p>面试中经常涉及的算法问题
<!--more--></p>

<h2 id="分治是手段递归是手段的实现方式">分治是手段，递归是手段的实现方式</h2>

<h2 id="递归模板">递归模板</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def recursion(level,param1,param2...):
	# recursion terminator
	if level &gt; MAX_LEVEL:
		print_result
		return
	
	# process logic in current level
	process_data(level,data...)
	
	# drill down
	self.recursion(level+1,p1,p2...)
	
	# reverse the current level status if needed
	reverse_state(level)
</code></pre></div></div>

<h2 id="分治模板">分治模板</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def divide_conquer(problem,param1,param2...):
	# recursion terminator
	if problem is None:
		print_result
		return
		
	# prepare data
	data = prepare_data(problem)
	subproblems = split_problem(problem,data)
	
	# conquer subproblems
	subresult1 = self.divide_conquer(subproblems[0],p1...)
	subresult2 = self.divide_conquer(subproblems[1],p1...)
	subresult3 = self.divide_conquer(subproblems[2],p1...)
	
	# process and generate the final result
	result = process_result(subresult1,subresult2,subresult3...)
</code></pre></div></div>


	  ]]></description>
	</item>


</channel>
</rss>
